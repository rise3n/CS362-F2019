        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:20
        -:    0:Programs:8
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 600 returned 100% blocks executed 83%
      600:    8:int compare(const void* a, const void* b) {
      600:    9:    if (*(int*)a > *(int*)b)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   10:        return 1;
      600:   11:    if (*(int*)a < *(int*)b)
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
      160:   12:        return -1;
      440:   13:    return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:    struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:    return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:                  int k8, int k9, int k10) {
    #####:   23:    int* k = malloc(10 * sizeof(int));
    #####:   24:    k[0] = k1;
    #####:   25:    k[1] = k2;
    #####:   26:    k[2] = k3;
    #####:   27:    k[3] = k4;
    #####:   28:    k[4] = k5;
    #####:   29:    k[5] = k6;
    #####:   30:    k[6] = k7;
    #####:   31:    k[7] = k8;
    #####:   32:    k[8] = k9;
    #####:   33:    k[9] = k10;
    #####:   34:    return k;
        -:   35:}
        -:   36:
function initializeGame called 20 returned 100% blocks executed 88%
       20:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:                   struct gameState *state) {
        -:   39:    int i;
        -:   40:    int j;
        -:   41:    int it;
        -:   42:
        -:   43:    //set up random number generator
       20:   44:    SelectStream(1);
call    0 returned 100%
       20:   45:    PutSeed((long)randomSeed);
call    0 returned 100%
        -:   46:
        -:   47:    //check number of players
       20:   48:    if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   49:    {
    #####:   50:        return -1;
        -:   51:    }
        -:   52:
        -:   53:    //set number of players
       20:   54:    state->numPlayers = numPlayers;
        -:   55:
        -:   56:    //check selected kingdom cards are different
      220:   57:    for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   58:    {
     2200:   59:        for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:        {
     2000:   61:            if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   62:            {
    #####:   63:                return -1;
        -:   64:            }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:    //initialize supply
        -:   70:    ///////////////////////////////
        -:   71:
        -:   72:    //set number of Curse cards
       20:   73:    if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   74:    {
       20:   75:        state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:    else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   78:    {
    #####:   79:        state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:    else
        -:   82:    {
    #####:   83:        state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:    //set number of Victory cards
       20:   87:    if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   88:    {
       20:   89:        state->supplyCount[estate] = 8;
       20:   90:        state->supplyCount[duchy] = 8;
       20:   91:        state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:    else
        -:   94:    {
    #####:   95:        state->supplyCount[estate] = 12;
    #####:   96:        state->supplyCount[duchy] = 12;
    #####:   97:        state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:    //set number of Treasure cards
       20:  101:    state->supplyCount[copper] = 60 - (7 * numPlayers);
       20:  102:    state->supplyCount[silver] = 40;
       20:  103:    state->supplyCount[gold] = 30;
        -:  104:
        -:  105:    //set number of Kingdom cards
      420:  106:    for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  107:    {
     3300:  108:        for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  109:        {
     3100:  110:            if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  111:            {
        -:  112:                //check if card is a 'Victory' Kingdom card
      200:  113:                if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 11% (fallthrough)
branch  3 taken 89%
        -:  114:                {
       80:  115:                    if (numPlayers == 2) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
       40:  116:                        state->supplyCount[i] = 8;
        -:  117:                    }
        -:  118:                    else {
    #####:  119:                        state->supplyCount[i] = 12;
        -:  120:                    }
        -:  121:                }
        -:  122:                else
        -:  123:                {
      160:  124:                    state->supplyCount[i] = 10;
        -:  125:                }
      200:  126:                break;
        -:  127:            }
        -:  128:            else    //card is not in the set choosen for the game
        -:  129:            {
     2900:  130:                state->supplyCount[i] = -1;
        -:  131:            }
        -:  132:        }
        -:  133:
        -:  134:    }
        -:  135:
        -:  136:    ////////////////////////
        -:  137:    //supply intilization complete
        -:  138:
        -:  139:    //set player decks
       60:  140:    for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  141:    {
       40:  142:        state->deckCount[i] = 0;
      160:  143:        for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  144:        {
      120:  145:            state->deck[i][j] = estate;
      120:  146:            state->deckCount[i]++;
        -:  147:        }
      320:  148:        for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  149:        {
      280:  150:            state->deck[i][j] = copper;
      280:  151:            state->deckCount[i]++;
        -:  152:        }
        -:  153:    }
        -:  154:
        -:  155:    //shuffle player decks
       60:  156:    for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  157:    {
       40:  158:        if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  159:        {
    #####:  160:            return -1;
        -:  161:        }
        -:  162:    }
        -:  163:
        -:  164:    //draw player hands
       60:  165:    for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  166:    {
        -:  167:        //initialize hand size to zero
       40:  168:        state->handCount[i] = 0;
       40:  169:        state->discardCount[i] = 0;
        -:  170:        //draw 5 cards
        -:  171:        // for (j = 0; j < 5; j++)
        -:  172:        //	{
        -:  173:        //	  drawCard(i, state);
        -:  174:        //	}
        -:  175:    }
        -:  176:
        -:  177:    //set embargo tokens to 0 for all supply piles
      560:  178:    for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  179:    {
      540:  180:        state->embargoTokens[i] = 0;
        -:  181:    }
        -:  182:
        -:  183:    //initialize first player's turn
       20:  184:    state->outpostPlayed = 0;
       20:  185:    state->phase = 0;
       20:  186:    state->numActions = 1;
       20:  187:    state->numBuys = 1;
       20:  188:    state->playedCardCount = 0;
       20:  189:    state->whoseTurn = 0;
       20:  190:    state->handCount[state->whoseTurn] = 0;
        -:  191:    //int it; move to top
        -:  192:
        -:  193:    //Moved draw cards to here, only drawing at the start of a turn
      120:  194:    for (it = 0; it < 5; it++) {
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
      100:  195:        drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  196:    }
        -:  197:
       20:  198:    updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  199:
       20:  200:    return 0;
        -:  201:}
        -:  202:
function shuffle called 40 returned 100% blocks executed 94%
       40:  203:int shuffle(int player, struct gameState *state) {
        -:  204:
        -:  205:
        -:  206:    int newDeck[MAX_DECK];
       40:  207:    int newDeckPos = 0;
        -:  208:    int card;
        -:  209:    int i;
        -:  210:
       40:  211:    if (state->deckCount[player] < 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  212:        return -1;
       40:  213:    qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
call    0 returned 100%
        -:  214:    /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  215:
      480:  216:    while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
      400:  217:        card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
      400:  218:        newDeck[newDeckPos] = state->deck[player][card];
      400:  219:        newDeckPos++;
     1140:  220:        for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 65%
branch  1 taken 35% (fallthrough)
      740:  221:            state->deck[player][i] = state->deck[player][i+1];
        -:  222:        }
      400:  223:        state->deckCount[player]--;
        -:  224:    }
      440:  225:    for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
      400:  226:        state->deck[player][i] = newDeck[i];
      400:  227:        state->deckCount[player]++;
        -:  228:    }
        -:  229:
       40:  230:    return 0;
        -:  231:}
        -:  232:
function playCard called 5 returned 100% blocks executed 47%
        5:  233:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  234:{
        -:  235:    int card;
        5:  236:    int coin_bonus = 0; 		//tracks coins gain from actions
        -:  237:
        -:  238:    //check if it is the right phase
        5:  239:    if (state->phase != 0)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  240:    {
    #####:  241:        return -1;
        -:  242:    }
        -:  243:
        -:  244:    //check if player has enough actions
        5:  245:    if ( state->numActions < 1 )
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  246:    {
    #####:  247:        return -1;
        -:  248:    }
        -:  249:
        -:  250:    //get card played
        5:  251:    card = handCard(handPos, state);
call    0 returned 100%
        -:  252:
        -:  253:    //check if selected card is an action
        5:  254:    if ( card < adventurer || card > treasure_map )
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
        -:  255:    {
        5:  256:        return -1;
        -:  257:    }
        -:  258:
        -:  259:    //play card
    #####:  260:    if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  261:    {
    #####:  262:        return -1;
        -:  263:    }
        -:  264:
        -:  265:    //reduce number of actions
    #####:  266:    state->numActions--;
        -:  267:
        -:  268:    //update coins (Treasure cards may be added with card draws)
    #####:  269:    updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  270:
    #####:  271:    return 0;
        -:  272:}
        -:  273:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  274:int buyCard(int supplyPos, struct gameState *state) {
        -:  275:    int who;
        -:  276:    if (DEBUG) {
        -:  277:        printf("Entering buyCard...\n");
        -:  278:    }
        -:  279:
        -:  280:    // I don't know what to do about the phase thing.
        -:  281:
    #####:  282:    who = state->whoseTurn;
        -:  283:
    #####:  284:    if (state->numBuys < 1) {
branch  0 never executed
branch  1 never executed
        -:  285:        if (DEBUG)
        -:  286:            printf("You do not have any buys left\n");
    #####:  287:        return -1;
    #####:  288:    } else if (supplyCount(supplyPos, state) <1) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  289:        if (DEBUG)
        -:  290:            printf("There are not any of that type of card left\n");
    #####:  291:        return -1;
    #####:  292:    } else if (state->coins < getCost(supplyPos)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  293:        if (DEBUG)
        -:  294:            printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  295:        return -1;
        -:  296:    } else {
    #####:  297:        state->phase=1;
        -:  298:        //state->supplyCount[supplyPos]--;
    #####:  299:        gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  300:
    #####:  301:        state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  302:        state->numBuys--;
        -:  303:        if (DEBUG)
        -:  304:            printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  305:    }
        -:  306:
        -:  307:    //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  308:    //state->discardCount[who]++;
        -:  309:
    #####:  310:    return 0;
        -:  311:}
        -:  312:
function numHandCards called 6 returned 100% blocks executed 100%
        6:  313:int numHandCards(struct gameState *state) {
        6:  314:    return state->handCount[ whoseTurn(state) ];
call    0 returned 100%
        -:  315:}
        -:  316:
function handCard called 5 returned 100% blocks executed 100%
        5:  317:int handCard(int handPos, struct gameState *state) {
        5:  318:    int currentPlayer = whoseTurn(state);
call    0 returned 100%
        5:  319:    return state->hand[currentPlayer][handPos];
        -:  320:}
        -:  321:
function supplyCount called 35 returned 100% blocks executed 100%
       35:  322:int supplyCount(int card, struct gameState *state) {
       35:  323:    return state->supplyCount[card];
        -:  324:}
        -:  325:
function fullDeckCount called 20 returned 100% blocks executed 94%
       20:  326:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  327:    int i;
       20:  328:    int count = 0;
        -:  329:
      120:  330:    for (i = 0; i < state->deckCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -:  331:    {
      100:  332:        if (state->deck[player][i] == card) count++;
branch  0 taken 40% (fallthrough)
branch  1 taken 60%
        -:  333:    }
        -:  334:
       25:  335:    for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 20%
branch  1 taken 80% (fallthrough)
        -:  336:    {
        5:  337:        if (state->hand[player][i] == card) count++;
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  338:    }
        -:  339:
      115:  340:    for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -:  341:    {
       95:  342:        if (state->discard[player][i] == card) count++;
branch  0 taken 37% (fallthrough)
branch  1 taken 63%
        -:  343:    }
        -:  344:
       20:  345:    return count;
        -:  346:}
        -:  347:
function whoseTurn called 31 returned 100% blocks executed 100%
       31:  348:int whoseTurn(struct gameState *state) {
       31:  349:    return state->whoseTurn;
        -:  350:}
        -:  351:
function endTurn called 20 returned 100% blocks executed 93%
       20:  352:int endTurn(struct gameState *state) {
        -:  353:    int k;
        -:  354:    int i;
       20:  355:    int currentPlayer = whoseTurn(state);
call    0 returned 100%
        -:  356:
        -:  357:    //Discard hand
       86:  358:    for (i = 0; i < state->handCount[currentPlayer]; i++) {
branch  0 taken 77%
branch  1 taken 23% (fallthrough)
       66:  359:        state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
       66:  360:        state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  361:    }
       20:  362:    state->handCount[currentPlayer] = 0;//Reset hand count
        -:  363:
        -:  364:    //Code for determining the player
       20:  365:    if (currentPlayer < (state->numPlayers - 1)) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
       20:  366:        state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  367:    }
        -:  368:    else {
    #####:  369:        state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  370:    }
        -:  371:
       20:  372:    state->outpostPlayed = 0;
       20:  373:    state->phase = 0;
       20:  374:    state->numActions = 1;
       20:  375:    state->coins = 0;
       20:  376:    state->numBuys = 1;
       20:  377:    state->playedCardCount = 0;
       20:  378:    state->handCount[state->whoseTurn] = 0;
        -:  379:
        -:  380:    //int k; move to top
        -:  381:    //Next player draws hand
      120:  382:    for (k = 0; k < 5; k++) {
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
      100:  383:        drawCard(state->whoseTurn, state);//Draw a card
call    0 returned 100%
        -:  384:    }
        -:  385:
        -:  386:    //Update money
       20:  387:    updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  388:
       20:  389:    return 0;
        -:  390:}
        -:  391:
function isGameOver called 5 returned 100% blocks executed 73%
        5:  392:int isGameOver(struct gameState *state) {
        -:  393:    int i;
        -:  394:    int j;
        -:  395:
        -:  396:    //if stack of Province cards is empty, the game ends
        5:  397:    if (state->supplyCount[province] == 0)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  398:    {
    #####:  399:        return 1;
        -:  400:    }
        -:  401:
        -:  402:    //if three supply pile are at 0, the game ends
        5:  403:    j = 0;
      130:  404:    for (i = 0; i < 25; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  405:    {
      125:  406:        if (state->supplyCount[i] == 0)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  407:        {
    #####:  408:            j++;
        -:  409:        }
        -:  410:    }
        5:  411:    if ( j >= 3)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  412:    {
    #####:  413:        return 1;
        -:  414:    }
        -:  415:
        5:  416:    return 0;
        -:  417:}
        -:  418:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  419:int scoreFor (int player, struct gameState *state) {
        -:  420:
        -:  421:    int i;
    #####:  422:    int score = 0;
        -:  423:    //score from hand
    #####:  424:    for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  425:    {
    #####:  426:        if (state->hand[player][i] == curse) {
branch  0 never executed
branch  1 never executed
    #####:  427:            score = score - 1;
        -:  428:        };
    #####:  429:        if (state->hand[player][i] == estate) {
branch  0 never executed
branch  1 never executed
    #####:  430:            score = score + 1;
        -:  431:        };
    #####:  432:        if (state->hand[player][i] == duchy) {
branch  0 never executed
branch  1 never executed
    #####:  433:            score = score + 3;
        -:  434:        };
    #####:  435:        if (state->hand[player][i] == province) {
branch  0 never executed
branch  1 never executed
    #####:  436:            score = score + 6;
        -:  437:        };
    #####:  438:        if (state->hand[player][i] == great_hall) {
branch  0 never executed
branch  1 never executed
    #####:  439:            score = score + 1;
        -:  440:        };
    #####:  441:        if (state->hand[player][i] == gardens) {
branch  0 never executed
branch  1 never executed
    #####:  442:            score = score + ( fullDeckCount(player, 0, state) / 10 );
call    0 never executed
        -:  443:        };
        -:  444:    }
        -:  445:
        -:  446:    //score from discard
    #####:  447:    for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  448:    {
    #####:  449:        if (state->discard[player][i] == curse) {
branch  0 never executed
branch  1 never executed
    #####:  450:            score = score - 1;
        -:  451:        };
    #####:  452:        if (state->discard[player][i] == estate) {
branch  0 never executed
branch  1 never executed
    #####:  453:            score = score + 1;
        -:  454:        };
    #####:  455:        if (state->discard[player][i] == duchy) {
branch  0 never executed
branch  1 never executed
    #####:  456:            score = score + 3;
        -:  457:        };
    #####:  458:        if (state->discard[player][i] == province) {
branch  0 never executed
branch  1 never executed
    #####:  459:            score = score + 6;
        -:  460:        };
    #####:  461:        if (state->discard[player][i] == great_hall) {
branch  0 never executed
branch  1 never executed
    #####:  462:            score = score + 1;
        -:  463:        };
    #####:  464:        if (state->discard[player][i] == gardens) {
branch  0 never executed
branch  1 never executed
    #####:  465:            score = score + ( fullDeckCount(player, 0, state) / 10 );
call    0 never executed
        -:  466:        };
        -:  467:    }
        -:  468:
        -:  469:    //score from deck
    #####:  470:    for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  471:    {
    #####:  472:        if (state->deck[player][i] == curse) {
branch  0 never executed
branch  1 never executed
    #####:  473:            score = score - 1;
        -:  474:        };
    #####:  475:        if (state->deck[player][i] == estate) {
branch  0 never executed
branch  1 never executed
    #####:  476:            score = score + 1;
        -:  477:        };
    #####:  478:        if (state->deck[player][i] == duchy) {
branch  0 never executed
branch  1 never executed
    #####:  479:            score = score + 3;
        -:  480:        };
    #####:  481:        if (state->deck[player][i] == province) {
branch  0 never executed
branch  1 never executed
    #####:  482:            score = score + 6;
        -:  483:        };
    #####:  484:        if (state->deck[player][i] == great_hall) {
branch  0 never executed
branch  1 never executed
    #####:  485:            score = score + 1;
        -:  486:        };
    #####:  487:        if (state->deck[player][i] == gardens) {
branch  0 never executed
branch  1 never executed
    #####:  488:            score = score + ( fullDeckCount(player, 0, state) / 10 );
call    0 never executed
        -:  489:        };
        -:  490:    }
        -:  491:
    #####:  492:    return score;
        -:  493:}
        -:  494:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  495:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  496:    int i;
        -:  497:    int j;
        -:  498:    int highScore;
        -:  499:    int currentPlayer;
        -:  500:
        -:  501:    //get score for each player
    #####:  502:    for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  503:    {
        -:  504:        //set unused player scores to -9999
    #####:  505:        if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  506:        {
    #####:  507:            players[i] = -9999;
        -:  508:        }
        -:  509:        else
        -:  510:        {
    #####:  511:            players[i] = scoreFor (i, state);
call    0 never executed
        -:  512:        }
        -:  513:    }
        -:  514:
        -:  515:    //find highest score
    #####:  516:    j = 0;
    #####:  517:    for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  518:    {
    #####:  519:        if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  520:        {
    #####:  521:            j = i;
        -:  522:        }
        -:  523:    }
    #####:  524:    highScore = players[j];
        -:  525:
        -:  526:    //add 1 to players who had less turns
    #####:  527:    currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  528:    for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  529:    {
    #####:  530:        if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  531:        {
    #####:  532:            players[i]++;
        -:  533:        }
        -:  534:    }
        -:  535:
        -:  536:    //find new highest score
    #####:  537:    j = 0;
    #####:  538:    for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  539:    {
    #####:  540:        if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  541:        {
    #####:  542:            j = i;
        -:  543:        }
        -:  544:    }
    #####:  545:    highScore = players[j];
        -:  546:
        -:  547:    //set winners in array to 1 and rest to 0
    #####:  548:    for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  549:    {
    #####:  550:        if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  551:        {
    #####:  552:            players[i] = 1;
        -:  553:        }
        -:  554:        else
        -:  555:        {
    #####:  556:            players[i] = 0;
        -:  557:        }
        -:  558:    }
        -:  559:
    #####:  560:    return 0;
        -:  561:}
        -:  562:
function drawCard called 204 returned 100% blocks executed 38%
      204:  563:int drawCard(int player, struct gameState *state)
        -:  564:{   int count;
        -:  565:    int deckCounter;
      204:  566:    if (state->deckCount[player] <= 0) { //Deck is empty
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  567:
        -:  568:        //Step 1 Shuffle the discard pile back into a deck
        -:  569:        int i;
        -:  570:        //Move discard to deck
    #####:  571:        for (i = 0; i < state->discardCount[player]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  572:            state->deck[player][i] = state->discard[player][i];
    #####:  573:            state->discard[player][i] = -1;
        -:  574:        }
        -:  575:
    #####:  576:        state->deckCount[player] = state->discardCount[player];
    #####:  577:        state->discardCount[player] = 0;//Reset discard
        -:  578:
        -:  579:        //Shufffle the deck
    #####:  580:        shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 never executed
        -:  581:
        -:  582:        if (DEBUG) { //Debug statements
        -:  583:            printf("Deck count now: %d\n", state->deckCount[player]);
        -:  584:        }
        -:  585:
    #####:  586:        state->discardCount[player] = 0;
        -:  587:
        -:  588:        //Step 2 Draw Card
    #####:  589:        count = state->handCount[player];//Get current player's hand count
        -:  590:
        -:  591:        if (DEBUG) { //Debug statements
        -:  592:            printf("Current hand count: %d\n", count);
        -:  593:        }
        -:  594:
    #####:  595:        deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  596:
    #####:  597:        if (deckCounter == 0)
branch  0 never executed
branch  1 never executed
    #####:  598:            return -1;
        -:  599:
    #####:  600:        state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  601:        state->deckCount[player]--;
    #####:  602:        state->handCount[player]++;//Increment hand count
        -:  603:    }
        -:  604:
        -:  605:    else {
      204:  606:        int count = state->handCount[player];//Get current hand count for player
        -:  607:        int deckCounter;
        -:  608:        if (DEBUG) { //Debug statements
        -:  609:            printf("Current hand count: %d\n", count);
        -:  610:        }
        -:  611:
      204:  612:        deckCounter = state->deckCount[player];//Create holder for the deck count
      204:  613:        state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
      204:  614:        state->deckCount[player]--;
      204:  615:        state->handCount[player]++;//Increment hand count
        -:  616:    }
        -:  617:
      204:  618:    return 0;
        -:  619:}
        -:  620:
function getCost called 28 returned 100% blocks executed 30%
       28:  621:int getCost(int cardNumber)
        -:  622:{
       28:  623:    switch( cardNumber )
branch  0 taken 0%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 14%
branch  5 taken 14%
branch  6 taken 0%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 14%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 18%
branch 16 taken 0%
branch 17 taken 4%
branch 18 taken 0%
branch 19 taken 18%
branch 20 taken 18%
branch 21 taken 0%
branch 22 taken 0%
branch 23 taken 0%
branch 24 taken 0%
branch 25 taken 0%
branch 26 taken 0%
branch 27 taken 0%
        -:  624:    {
    #####:  625:    case curse:
    #####:  626:        return 0;
    #####:  627:    case estate:
    #####:  628:        return 2;
    #####:  629:    case duchy:
    #####:  630:        return 5;
    #####:  631:    case province:
    #####:  632:        return 8;
        4:  633:    case copper:
        4:  634:        return 0;
        4:  635:    case silver:
        4:  636:        return 3;
    #####:  637:    case gold:
    #####:  638:        return 6;
    #####:  639:    case adventurer:
    #####:  640:        return 6;
    #####:  641:    case council_room:
    #####:  642:        return 5;
    #####:  643:    case feast:
    #####:  644:        return 4;
    #####:  645:    case gardens:
    #####:  646:        return 4;
        4:  647:    case mine:
        4:  648:        return 5;
    #####:  649:    case remodel:
    #####:  650:        return 4;
    #####:  651:    case smithy:
    #####:  652:        return 4;
    #####:  653:    case village:
    #####:  654:        return 3;
        5:  655:    case baron:
        5:  656:        return 4;
    #####:  657:    case great_hall:
    #####:  658:        return 3;
        1:  659:    case minion:
        1:  660:        return 5;
    #####:  661:    case steward:
    #####:  662:        return 3;
        5:  663:    case tribute:
        5:  664:        return 5;
        5:  665:    case ambassador:
        5:  666:        return 3;
    #####:  667:    case cutpurse:
    #####:  668:        return 4;
    #####:  669:    case embargo:
    #####:  670:        return 2;
    #####:  671:    case outpost:
    #####:  672:        return 5;
    #####:  673:    case salvager:
    #####:  674:        return 4;
    #####:  675:    case sea_hag:
    #####:  676:        return 4;
    #####:  677:    case treasure_map:
    #####:  678:        return 4;
        -:  679:    }
        -:  680:
    #####:  681:    return -1;
        -:  682:}
        -:  683:
function cardEffect called 0 returned 0% blocks executed 0%
    #####:  684:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  685:{
        -:  686:    int i;
        -:  687:    int j;
        -:  688:    int k;
        -:  689:    int x;
        -:  690:    int index;
    #####:  691:    int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  692:    int nextPlayer = currentPlayer + 1;
        -:  693:
    #####:  694:    int tributeRevealedCards[2] = {-1, -1};
        -:  695:    int temphand[MAX_HAND];// moved above the if statement
    #####:  696:    int drawntreasure=0;
        -:  697:    int cardDrawn;
    #####:  698:    int z = 0;// this is the counter for the temp hand
    #####:  699:    if (nextPlayer > (state->numPlayers - 1)) {
branch  0 never executed
branch  1 never executed
    #####:  700:        nextPlayer = 0;
        -:  701:    }
        -:  702:
        -:  703:
        -:  704:    //uses switch to select card and perform actions
    #####:  705:    switch( card )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
        -:  706:    {
    #####:  707:    case adventurer:
    #####:  708:        while(drawntreasure<2) {
branch  0 never executed
branch  1 never executed
    #####:  709:            if (state->deckCount[currentPlayer] <1) { //if the deck is empty we need to shuffle discard and add to deck
branch  0 never executed
branch  1 never executed
    #####:  710:                shuffle(currentPlayer, state);
call    0 never executed
        -:  711:            }
    #####:  712:            drawCard(currentPlayer, state);
call    0 never executed
    #####:  713:            cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####:  714:            if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  715:                drawntreasure++;
        -:  716:            else {
    #####:  717:                temphand[z]=cardDrawn;
    #####:  718:                state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  719:                z++;
        -:  720:            }
        -:  721:        }
    #####:  722:        while(z-1>=0) {
branch  0 never executed
branch  1 never executed
    #####:  723:            state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  724:            z=z-1;
        -:  725:        }
    #####:  726:        return 0;
        -:  727:
    #####:  728:    case council_room:
        -:  729:        //+4 Cards
    #####:  730:        for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  731:        {
    #####:  732:            drawCard(currentPlayer, state);
call    0 never executed
        -:  733:        }
        -:  734:
        -:  735:        //+1 Buy
    #####:  736:        state->numBuys++;
        -:  737:
        -:  738:        //Each other player draws a card
    #####:  739:        for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  740:        {
    #####:  741:            if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -:  742:            {
    #####:  743:                drawCard(i, state);
call    0 never executed
        -:  744:            }
        -:  745:        }
        -:  746:
        -:  747:        //put played card in played card pile
    #####:  748:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  749:
    #####:  750:        return 0;
        -:  751:
    #####:  752:    case feast:
        -:  753:        //gain card with cost up to 5
        -:  754:        //Backup hand
    #####:  755:        for (i = 0; i <= state->handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  756:            temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  757:            state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  758:        }
        -:  759:        //Backup hand
        -:  760:
        -:  761:        //Update Coins for Buy
    #####:  762:        updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  763:        x = 1;//Condition to loop on
    #####:  764:        while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  765:            if (supplyCount(choice1, state) <= 0) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  766:                if (DEBUG)
        -:  767:                    printf("None of that card left, sorry!\n");
        -:  768:
        -:  769:                if (DEBUG) {
        -:  770:                    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  771:                }
        -:  772:            }
    #####:  773:            else if (state->coins < getCost(choice1)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  774:                printf("That card is too expensive!\n");
call    0 never executed
        -:  775:
        -:  776:                if (DEBUG) {
        -:  777:                    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  778:                }
        -:  779:            }
        -:  780:            else {
        -:  781:
        -:  782:                if (DEBUG) {
        -:  783:                    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  784:                }
        -:  785:
    #####:  786:                gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  787:                x = 0;//No more buying cards
        -:  788:
        -:  789:                if (DEBUG) {
        -:  790:                    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  791:                }
        -:  792:
        -:  793:            }
        -:  794:        }
        -:  795:
        -:  796:        //Reset Hand
    #####:  797:        for (i = 0; i <= state->handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  798:            state->hand[currentPlayer][i] = temphand[i];
    #####:  799:            temphand[i] = -1;
        -:  800:        }
        -:  801:        //Reset Hand
        -:  802:
    #####:  803:        return 0;
        -:  804:
    #####:  805:    case gardens:
    #####:  806:        return -1;
        -:  807:
    #####:  808:    case mine:
    #####:  809:		return play_mine(choice1, choice2, currentPlayer, state, handPos);
call    0 never executed
        -:  810:
    #####:  811:    case remodel:
    #####:  812:        j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  813:
    #####:  814:        if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  815:        {
    #####:  816:            return -1;
        -:  817:        }
        -:  818:
    #####:  819:        gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  820:
        -:  821:        //discard card from hand
    #####:  822:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  823:
        -:  824:        //discard trashed card
    #####:  825:        for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  826:        {
    #####:  827:            if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  828:            {
    #####:  829:                discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####:  830:                break;
        -:  831:            }
        -:  832:        }
        -:  833:
        -:  834:
    #####:  835:        return 0;
        -:  836:
    #####:  837:    case smithy:
        -:  838:        //+3 Cards
    #####:  839:        for (i = 0; i < 3; i++)
branch  0 never executed
branch  1 never executed
        -:  840:        {
    #####:  841:            drawCard(currentPlayer, state);
call    0 never executed
        -:  842:        }
        -:  843:
        -:  844:        //discard card from hand
    #####:  845:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  846:        return 0;
        -:  847:
    #####:  848:    case village:
        -:  849:        //+1 Card
    #####:  850:        drawCard(currentPlayer, state);
call    0 never executed
        -:  851:
        -:  852:        //+2 Actions
    #####:  853:        state->numActions = state->numActions + 2;
        -:  854:
        -:  855:        //discard played card from hand
    #####:  856:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  857:        return 0;
        -:  858:
    #####:  859:    case baron:
    #####:  860:		return play_baron(choice1, currentPlayer, state, handPos, bonus);
call    0 never executed
        -:  861:
    #####:  862:    case great_hall:
        -:  863:        //+1 Card
    #####:  864:        drawCard(currentPlayer, state);
call    0 never executed
        -:  865:
        -:  866:        //+1 Actions
    #####:  867:        state->numActions++;
        -:  868:
        -:  869:        //discard card from hand
    #####:  870:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  871:        return 0;
        -:  872:
    #####:  873:    case minion:
    #####:  874:		return play_minion(choice1, choice2, currentPlayer, state, handPos, bonus);
call    0 never executed
        -:  875:
    #####:  876:    case steward:
    #####:  877:        if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  878:        {
        -:  879:            //+2 cards
    #####:  880:            drawCard(currentPlayer, state);
call    0 never executed
    #####:  881:            drawCard(currentPlayer, state);
call    0 never executed
        -:  882:        }
    #####:  883:        else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -:  884:        {
        -:  885:            //+2 coins
    #####:  886:            state->coins = state->coins + 2;
        -:  887:        }
        -:  888:        else
        -:  889:        {
        -:  890:            //trash 2 cards in hand
    #####:  891:            discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####:  892:            discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -:  893:        }
        -:  894:
        -:  895:        //discard card from hand
    #####:  896:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  897:        return 0;
        -:  898:
    #####:  899:    case tribute:
    #####:  900:		return play_tribute(tributeRevealedCards, currentPlayer, nextPlayer, state, handPos, bonus);
call    0 never executed
        -:  901:
    #####:  902:    case ambassador:
    #####:  903:		return play_ambassador(choice1, choice2, currentPlayer, state, handPos);
call    0 never executed
        -:  904:
    #####:  905:    case cutpurse:
        -:  906:
    #####:  907:        updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####:  908:        for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  909:        {
    #####:  910:            if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  911:            {
    #####:  912:                for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -:  913:                {
    #####:  914:                    if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -:  915:                    {
    #####:  916:                        discardCard(j, i, state, 0);
call    0 never executed
    #####:  917:                        break;
        -:  918:                    }
    #####:  919:                    if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -:  920:                    {
    #####:  921:                        for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -:  922:                        {
        -:  923:                            if (DEBUG)
        -:  924:                                printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -:  925:                        }
    #####:  926:                        break;
        -:  927:                    }
        -:  928:                }
        -:  929:
        -:  930:            }
        -:  931:
        -:  932:        }
        -:  933:
        -:  934:        //discard played card from hand
    #####:  935:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  936:
    #####:  937:        return 0;
        -:  938:
        -:  939:
    #####:  940:    case embargo:
        -:  941:        //+2 Coins
    #####:  942:        state->coins = state->coins + 2;
        -:  943:
        -:  944:        //see if selected pile is in play
    #####:  945:        if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -:  946:        {
    #####:  947:            return -1;
        -:  948:        }
        -:  949:
        -:  950:        //add embargo token to selected supply pile
    #####:  951:        state->embargoTokens[choice1]++;
        -:  952:
        -:  953:        //trash card
    #####:  954:        discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####:  955:        return 0;
        -:  956:
    #####:  957:    case outpost:
        -:  958:        //set outpost flag
    #####:  959:        state->outpostPlayed++;
        -:  960:
        -:  961:        //discard card
    #####:  962:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  963:        return 0;
        -:  964:
    #####:  965:    case salvager:
        -:  966:        //+1 buy
    #####:  967:        state->numBuys++;
        -:  968:
    #####:  969:        if (choice1)
branch  0 never executed
branch  1 never executed
        -:  970:        {
        -:  971:            //gain coins equal to trashed card
    #####:  972:            state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -:  973:            //trash card
    #####:  974:            discardCard(choice1, currentPlayer, state, 1);
call    0 never executed
        -:  975:        }
        -:  976:
        -:  977:        //discard card
    #####:  978:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  979:        return 0;
        -:  980:
    #####:  981:    case sea_hag:
    #####:  982:        for (i = 0; i < state->numPlayers; i++) {
branch  0 never executed
branch  1 never executed
    #####:  983:            if (i != currentPlayer) {
branch  0 never executed
branch  1 never executed
    #####:  984:                state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];
    #####:  985:                state->deckCount[i]--;
    #####:  986:                state->discardCount[i]++;
    #####:  987:                state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -:  988:            }
        -:  989:        }
    #####:  990:        return 0;
        -:  991:
    #####:  992:    case treasure_map:
        -:  993:        //search hand for another treasure_map
    #####:  994:        index = -1;
    #####:  995:        for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  996:        {
    #####:  997:            if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  998:            {
    #####:  999:                index = i;
    #####: 1000:                break;
        -: 1001:            }
        -: 1002:        }
    #####: 1003:        if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1004:        {
        -: 1005:            //trash both treasure cards
    #####: 1006:            discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1007:            discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1008:
        -: 1009:            //gain 4 Gold cards
    #####: 1010:            for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1011:            {
    #####: 1012:                gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1013:            }
        -: 1014:
        -: 1015:            //return success
    #####: 1016:            return 1;
        -: 1017:        }
        -: 1018:
        -: 1019:        //no second treasure_map found in hand
    #####: 1020:        return -1;
        -: 1021:    }
        -: 1022:
    #####: 1023:    return -1;
        -: 1024:}
        -: 1025:
function play_baron called 10 returned 100% blocks executed 78%
       10: 1026:int play_baron(int choice1, int currentPlayer, struct gameState *state, int handPos, int *bonus) {
       10: 1027:	state->numBuys++;//Increase buys by 1!
       10: 1028:	if (choice1 > 0) 
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -: 1029:	{ //Boolean true or going to discard an estate
        5: 1030:		int p = 0;//Iterator for hand!
        5: 1031:		int card_not_discarded = 1;//Flag for discard set!
       30: 1032:		while (card_not_discarded) 
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -: 1033:		{
        -: 1034:
       20: 1035:			if (state->hand[currentPlayer][p] == estate) 
branch  0 taken 25% (fallthrough)
branch  1 taken 75%
        -: 1036:			{ //Found an estate card!
        5: 1037:				*bonus = 4;//Add 4 coins to the amount of coins # fix to this...bonus is added after the card is played in updateCoind in playCard()...this is more logical and it prevents potencial incorrect calculation
        5: 1038:				state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
        5: 1039:				state->discardCount[currentPlayer]++;
        -: 1040:
       25: 1041:				for (; p < state->handCount[currentPlayer]; p++) 
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -: 1042:				{
       20: 1043:					state->hand[currentPlayer][p] = state->hand[currentPlayer][p + 1];
        -: 1044:				}
        -: 1045:				//state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;   // introduced bug 1 in baron. forget to remove the card
        -: 1046:				
        5: 1047:				state->handCount[currentPlayer]--;
        5: 1048:				card_not_discarded = 0;//Exit the loop
        -: 1049:			}
        -: 1050:
       15: 1051:			else if (p > state->handCount[currentPlayer]) 
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1052:			{
        -: 1053:
        -: 1054:				if (DEBUG) 
        -: 1055:				{
        -: 1056:					printf("No estate cards in your hand, invalid choice\n");
        -: 1057:					printf("Must gain an estate if there are any\n");
        -: 1058:				}
        -: 1059:
    #####: 1060:				if (supplyCount(estate, state) > 0) 
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1061:				{
        -: 1062:
    #####: 1063:					gainCard(estate, state, 0, currentPlayer);
call    0 never executed
        -: 1064:
    #####: 1065:					state->supplyCount[estate]--;//Decrement estates
        -: 1066:					//if (supplyCount(estate, state) == 0) {
        -: 1067:					//	isGameOver(state);
        -: 1068:					//} # it appears that the end game check here is unnecessary becasue the endgame check alway happens at the end of the turn
        -: 1069:				}
    #####: 1070:				card_not_discarded = 0;//Exit the loop
        -: 1071:			}
        -: 1072:
        -: 1073:			else 
        -: 1074:			{
       15: 1075:				p++;//Next card
        -: 1076:			}
        -: 1077:		}
        -: 1078:	}
        -: 1079:
        -: 1080:	else 
        -: 1081:	{
        -: 1082:
        5: 1083:		if (supplyCount(estate, state) > 0) 
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        -: 1084:		{
        -: 1085:
        5: 1086:			gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 returned 100%
        -: 1087:
        5: 1088:			state->supplyCount[estate]--;//Decrement Estates
        -: 1089:			//if (supplyCount(estate, state) == 0) {
        -: 1090:			//	isGameOver(state);
        -: 1091:			//} # same as above, the isGameOver check here is unnecessary
        -: 1092:		}
        -: 1093:	}
        -: 1094:	// needs to discard the card baron at the end of the cardeffect
       10: 1095:	discardCard(handPos, currentPlayer, state, 1);  //introduced bug 2 here, wrong discard flag here (1 stands for trash)
call    0 returned 100%
       10: 1096:	return 0;
        -: 1097:}
        -: 1098:
function play_minion called 3 returned 100% blocks executed 71%
        3: 1099:int play_minion(int choice1, int choice2, int currentPlayer, struct gameState *state, int handPos, int *bonus) {
        -: 1100:	//+1 action
        -: 1101:	//state->numActions++; //miss the +1 action bug 1
        -: 1102:	int i,j;
        -: 1103:
        3: 1104:	if (choice1)
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
        -: 1105:	{
        2: 1106:		*bonus = 2; // same as the bug in baron, set bonus to 2 so that the updateCoins in playcard() works correctly.
        -: 1107:	}
        1: 1108:	else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 1109:	{
        -: 1110:		//discard hand
        1: 1111:		i = 0;
        7: 1112:		while (numHandCards(state) > 0)
call    0 returned 100%
branch  1 taken 83%
branch  2 taken 17% (fallthrough)
        -: 1113:		{
        5: 1114:			discardCard(i, currentPlayer, state, 0);
call    0 returned 100%
        5: 1115:			i++; // bug 2 here because discardCard actually replace the discarded card with another card in hand, +1 would skip some cards.
        -: 1116:		}
        -: 1117:
        -: 1118:		//draw 4
        5: 1119:		for (i = 0; i < 4; i++)
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -: 1120:		{
        4: 1121:			drawCard(currentPlayer, state);
call    0 returned 100%
        -: 1122:		}
        -: 1123:
        -: 1124:		//other players discard hand and redraw if hand size > 4
        3: 1125:		for (i = 0; i < state->numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33%
        -: 1126:		{
        2: 1127:			if (i != currentPlayer)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -: 1128:			{
        1: 1129:				if (state->handCount[i] > 4)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1130:				{
        -: 1131:					//discard hand
    #####: 1132:					while (state->handCount[i] > 0)
branch  0 never executed
branch  1 never executed
        -: 1133:					{
    #####: 1134:						discardCard(0, i, state, 0);
call    0 never executed
        -: 1135:					}
        -: 1136:
        -: 1137:					//draw 4
    #####: 1138:					for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -: 1139:					{
    #####: 1140:						drawCard(i, state);
call    0 never executed
        -: 1141:					}
        -: 1142:				}
        -: 1143:			}
        -: 1144:		}
        -: 1145:
        -: 1146:	}
        -: 1147:	else
    #####: 1148:		return -1;//the if else if structure need an else statement to be rigid
        -: 1149:
        -: 1150:	//discard card from hand
        3: 1151:	discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        -: 1152:
        3: 1153:	return 0;
        -: 1154:
        -: 1155:}
        -: 1156:
function play_ambassador called 5 returned 100% blocks executed 87%
        5: 1157:int play_ambassador(int choice1, int choice2, int currentPlayer, struct gameState *state, int handPos) {
        -: 1158:	int i,j;
        5: 1159:	j = 0;		//used to check if player has enough cards to discard
        -: 1160:
        5: 1161:	if (choice2 > 2 || choice2 < 0)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -: 1162:	{
    #####: 1163:		return -1;
        -: 1164:	}
        -: 1165:
        5: 1166:	if (choice1 == handPos)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1167:	{
    #####: 1168:		return -1;
        -: 1169:	}
        -: 1170:
       30: 1171:	for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -: 1172:	{
       25: 1173:		if (i != handPos && state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])// bug 1 here, forget to skip the revealed card, which means that revealed card could be returned to supply
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
branch  2 taken 50% (fallthrough)
branch  3 taken 50%
        -: 1174:		{
       10: 1175:			j++;
        -: 1176:		}
        -: 1177:	}
        5: 1178:	if (j < choice2)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1179:	{
    #####: 1180:		return -1;
        -: 1181:	}
        -: 1182:
        -: 1183:	if (DEBUG)
        -: 1184:		printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1185:
        -: 1186:	//trash copies of cards returned to supply, move this part forward simply because of card description. 
       15: 1187:	for (j = 0; j < choice2; j++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -: 1188:	{
       10: 1189:		for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 taken 100%
branch  1 taken 0% (fallthrough)
        -: 1190:		{
       10: 1191:			if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 1192:			{
       10: 1193:				discardCard(i, currentPlayer, state, 1);
call    0 returned 100%
       10: 1194:				break;
        -: 1195:			}
        -: 1196:		}
        -: 1197:	}
        -: 1198:
        -: 1199:	//increase supply count for chosen card by amount being discarded
        5: 1200:	state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1201:
        -: 1202:	//each other player gains a copy of revealed card
       15: 1203:	for (i = 0; i < state->numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -: 1204:	{
       10: 1205:		if (i != currentPlayer)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -: 1206:		{
        5: 1207:			gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 returned 100%
        5: 1208:			state->supplyCount[state->hand[currentPlayer][choice1]]--;//introduce bug2 here. supplyCount is reduced in gainCard(). this is redundant.
        -: 1209:		}
        -: 1210:	}
        -: 1211:
        -: 1212:	//discard played card from hand
        5: 1213:	discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        5: 1214:	return 0;
        -: 1215:
        -: 1216:}
        -: 1217:
function play_tribute called 11 returned 100% blocks executed 79%
       11: 1218:int play_tribute(int *tributeRevealedCards,int currentPlayer, int nextPlayer, struct gameState *state, int handPos, int *bonus ) {
        -: 1219:	int i;
        -: 1220:	//check next players decks to make sure that tribute could work
       11: 1221:	if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1) 
branch  0 taken 55% (fallthrough)
branch  1 taken 45%
        -: 1222:	{
        -: 1223:		//if next player's deck has only 1 card
        6: 1224:		if (state->deckCount[nextPlayer] > 0) 
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -: 1225:		{
        3: 1226:			tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
        3: 1227:			state->deckCount[nextPlayer]--;
        -: 1228:		}
        -: 1229:		//if next player's deck has no card and discard pile has one card
        3: 1230:		else if (state->discardCount[nextPlayer] > 0) 
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
        -: 1231:		{
        2: 1232:			tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer] - 1];
        2: 1233:			state->discardCount[nextPlayer]--;
        -: 1234:		}
        -: 1235:		else 
        -: 1236:		{
        -: 1237:			//No Card to Reveal
        -: 1238:			if (DEBUG) 
        -: 1239:			{
        -: 1240:				printf("No cards to reveal\n");
        -: 1241:			}
        -: 1242:		}
        -: 1243:	}
        -: 1244:
        -: 1245:	else 
        -: 1246:	{
        -: 1247:		//if no cards available in deck
        5: 1248:		if (state->deckCount[nextPlayer] == 0) 
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1249:		{
    #####: 1250:			for (i = 0; i < state->discardCount[nextPlayer]; i++) 
branch  0 never executed
branch  1 never executed
        -: 1251:			{
    #####: 1252:				state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1253:				state->deckCount[nextPlayer]++;
    #####: 1254:				state->discard[nextPlayer][i] = -1;
    #####: 1255:				state->discardCount[nextPlayer]--;
        -: 1256:			}
        -: 1257:
    #####: 1258:			shuffle(nextPlayer, state);//Shuffle the deck
call    0 never executed
        -: 1259:		}
        5: 1260:		tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer] ];// bug 1 , forget to -1 which means that it checks an non existing card
        5: 1261:		state->deck[nextPlayer][state->deckCount[nextPlayer]-1] = -1; // there is a error here because the -- works after this statement is executed. I change the -- sign to -1 just like line 1326
        5: 1262:		state->deckCount[nextPlayer]--;
        5: 1263:		tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer] ];//same
        5: 1264:		state->deck[nextPlayer][state->deckCount[nextPlayer]-1] = -1;
        5: 1265:		state->deckCount[nextPlayer]--;
        -: 1266:
        5: 1267:		state->playedCardCount+=2; // bug 2, revealed cards need to be discarded but the update to discard pile is incomplete here.
        -: 1268:	}
        -: 1269:
       11: 1270:	if (tributeRevealedCards[0] == tributeRevealedCards[1]) 
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1271:	{ //If we have a duplicate card, just drop one
    #####: 1272:		state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1273:		state->playedCardCount++;
    #####: 1274:		tributeRevealedCards[1] = -1;
        -: 1275:	}
        -: 1276:
       22: 1277:	for (i = 0; i <= 2; i++) {
branch  0 taken 100%
branch  1 taken 0% (fallthrough)
       22: 1278:		if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold) 
branch  0 taken 73% (fallthrough)
branch  1 taken 27%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
        -: 1279:		{ //Treasure cards
        6: 1280:			*bonus += 2; // same here use bonus to prevent potencial error in updateCoins in playcard()
        -: 1281:		}
        -: 1282:
       16: 1283:		else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall) 
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
        -: 1284:		{ //Victory Card Found
    #####: 1285:			drawCard(currentPlayer, state);
call    0 never executed
    #####: 1286:			drawCard(currentPlayer, state);
call    0 never executed
        -: 1287:		}
       16: 1288:		else if (tributeRevealedCards[i] != -1)
branch  0 taken 31% (fallthrough)
branch  1 taken 69%
        -: 1289:		{ //Action Card
        5: 1290:			state->numActions = state->numActions + 2;
        -: 1291:		}
        -: 1292:		else
        -: 1293:		// since we assigned -1, we need one more else to break out the loop when we meet -1.
        -: 1294:		{
       11: 1295:			break;
        -: 1296:		}
        -: 1297:
        -: 1298:	}
       11: 1299:	discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
       11: 1300:	return 0;
        -: 1301:
        -: 1302:}
        -: 1303:
function play_mine called 4 returned 100% blocks executed 84%
        4: 1304:int play_mine(int choice1, int choice2, int currentPlayer, struct gameState *state, int handPos) {
        -: 1305:
        -: 1306:	int i,j;
        4: 1307:	j = state->hand[currentPlayer][choice1];  //store card we will trash
        -: 1308:
        4: 1309:	if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -: 1310:	{
    #####: 1311:		return -1;
        -: 1312:	}
        -: 1313:
        4: 1314:	if (choice2 > gold || choice2 < copper)// treasure_map is another card in dominion and its cost is 4, which is not right. just simply replace treasure_map and curse with gold and copper solve this issue.
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -: 1315:	{
    #####: 1316:		return -1;
        -: 1317:	}
        -: 1318:
        4: 1319:	if ((getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -: 1320:	{
    #####: 1321:		return -1;
        -: 1322:	}
        -: 1323:
        4: 1324:	gainCard(choice2, state, 0, currentPlayer); // bug 1 put the new treasure card into discard pile
call    0 returned 100%
        -: 1325:
        -: 1326:	//discard trashed card
       16: 1327:	for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -: 1328:	{
       12: 1329:		if (state->hand[currentPlayer][i] == j)
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
        -: 1330:		{
        8: 1331:			discardCard(i, currentPlayer, state, 1);// it should not be discarded but trashed. so the trash-flag should be 1
call    0 returned 100%
        -: 1332:			// break; // bug 2 here, remove break makes it discard all the selected treasure card in hand.
        -: 1333:		}
        -: 1334:	}
        -: 1335:
        -: 1336:	//discard card from hand
        4: 1337:	discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        -: 1338:
        4: 1339:	return 0;
        -: 1340:
        -: 1341:}
        -: 1342:
function discardCard called 56 returned 100% blocks executed 100%
       56: 1343:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1344:{
        -: 1345:
        -: 1346:    //if card is not trashed, added to Played pile
       56: 1347:    if (trashFlag < 1)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -: 1348:    {
        -: 1349:        //add card to played pile
       28: 1350:        state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
       28: 1351:        state->playedCardCount++;
       28: 1352:		state->discardCount[currentPlayer] +=1;
       28: 1353:		state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][handPos];
        -: 1354:    }
        -: 1355:
        -: 1356:    //set played card to -1
       56: 1357:    state->hand[currentPlayer][handPos] = -1;
        -: 1358:
        -: 1359:    //remove card from player's hand
       56: 1360:    if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 11% (fallthrough)
branch  1 taken 89%
        -: 1361:    {
        -: 1362:        //reduce number of cards in hand
        6: 1363:        state->handCount[currentPlayer]--;
        -: 1364:    }
       50: 1365:    else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 12% (fallthrough)
branch  1 taken 88%
        -: 1366:    {
        -: 1367:        //reduce number of cards in hand
        6: 1368:        state->handCount[currentPlayer]--;
        -: 1369:    }
        -: 1370:    else
        -: 1371:    {
        -: 1372:        //replace discarded card with last card in hand
       44: 1373:        state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1374:        //set last card to -1
       44: 1375:        state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1376:        //reduce number of cards in hand
       44: 1377:        state->handCount[currentPlayer]--;
        -: 1378:    }
        -: 1379:
       56: 1380:    return 0;
        -: 1381:}
        -: 1382:
function gainCard called 30 returned 100% blocks executed 90%
       30: 1383:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1384:{
        -: 1385:    //Note: supplyPos is enum of choosen card
        -: 1386:
        -: 1387:    //check if supply pile is empty (0) or card is not used in game (-1)
       30: 1388:    if ( supplyCount(supplyPos, state) < 1 )
call    0 returned 100%
branch  1 taken 3% (fallthrough)
branch  2 taken 97%
        -: 1389:    {
        1: 1390:        return -1;
        -: 1391:    }
        -: 1392:
        -: 1393:    //added card for [whoseTurn] current player:
        -: 1394:    // toFlag = 0 : add to discard
        -: 1395:    // toFlag = 1 : add to deck
        -: 1396:    // toFlag = 2 : add to hand
        -: 1397:
       29: 1398:    if (toFlag == 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1399:    {
    #####: 1400:        state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1401:        state->deckCount[player]++;
        -: 1402:    }
       29: 1403:    else if (toFlag == 2)
branch  0 taken 52% (fallthrough)
branch  1 taken 48%
        -: 1404:    {
       15: 1405:        state->hand[ player ][ state->handCount[player] ] = supplyPos;
       15: 1406:        state->handCount[player]++;
        -: 1407:    }
        -: 1408:    else
        -: 1409:    {
       14: 1410:        state->discard[player][ state->discardCount[player] ] = supplyPos;
       14: 1411:        state->discardCount[player]++;
        -: 1412:    }
        -: 1413:
        -: 1414:    //decrease number in supply pile
       29: 1415:    state->supplyCount[supplyPos]--;
        -: 1416:
       29: 1417:    return 0;
        -: 1418:}
        -: 1419:
function updateCoins called 40 returned 100% blocks executed 82%
       40: 1420:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1421:{
        -: 1422:    int i;
        -: 1423:
        -: 1424:    //reset coin count
       40: 1425:    state->coins = 0;
        -: 1426:
        -: 1427:    //add coins for each Treasure card in player's hand
      240: 1428:    for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -: 1429:    {
      200: 1430:        if (state->hand[player][i] == copper)
branch  0 taken 75% (fallthrough)
branch  1 taken 25%
        -: 1431:        {
      150: 1432:            state->coins += 1;
        -: 1433:        }
       50: 1434:        else if (state->hand[player][i] == silver)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1435:        {
    #####: 1436:            state->coins += 2;
        -: 1437:        }
       50: 1438:        else if (state->hand[player][i] == gold)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1439:        {
    #####: 1440:            state->coins += 3;
        -: 1441:        }
        -: 1442:    }
        -: 1443:
        -: 1444:    //add bonus
       40: 1445:    state->coins += bonus;
        -: 1446:
       40: 1447:    return 0;
        -: 1448:}
        -: 1449:
        -: 1450:
        -: 1451://end of dominion.c
        -: 1452:
