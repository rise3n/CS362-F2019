        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:3
        -:    0:Programs:3
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 425534 returned 100% blocks executed 100%
   425534:    8:int compare(const void* a, const void* b) {
   425534:    9:    if (*(int*)a > *(int*)b)
branch  0 taken 42% (fallthrough)
branch  1 taken 58%
   176702:   10:        return 1;
   248832:   11:    if (*(int*)a < *(int*)b)
branch  0 taken 43% (fallthrough)
branch  1 taken 57%
   106527:   12:        return -1;
   142305:   13:    return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:    struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:    return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:                  int k8, int k9, int k10) {
    #####:   23:    int* k = malloc(10 * sizeof(int));
    #####:   24:    k[0] = k1;
    #####:   25:    k[1] = k2;
    #####:   26:    k[2] = k3;
    #####:   27:    k[3] = k4;
    #####:   28:    k[4] = k5;
    #####:   29:    k[5] = k6;
    #####:   30:    k[6] = k7;
    #####:   31:    k[7] = k8;
    #####:   32:    k[8] = k9;
    #####:   33:    k[9] = k10;
    #####:   34:    return k;
        -:   35:}
        -:   36:
function initializeGame called 3000 returned 100% blocks executed 95%
     3000:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:                   struct gameState *state) {
        -:   39:    int i;
        -:   40:    int j;
        -:   41:    int it;
        -:   42:
        -:   43:    //set up random number generator
     3000:   44:    SelectStream(1);
call    0 returned 100%
     3000:   45:    PutSeed((long)randomSeed);
call    0 returned 100%
        -:   46:
        -:   47:    //check number of players
     3000:   48:    if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   49:    {
    #####:   50:        return -1;
        -:   51:    }
        -:   52:
        -:   53:    //set number of players
     3000:   54:    state->numPlayers = numPlayers;
        -:   55:
        -:   56:    //check selected kingdom cards are different
    33000:   57:    for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   58:    {
   330000:   59:        for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:        {
   300000:   61:            if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   62:            {
    #####:   63:                return -1;
        -:   64:            }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:    //initialize supply
        -:   70:    ///////////////////////////////
        -:   71:
        -:   72:    //set number of Curse cards
     3000:   73:    if (numPlayers == 2)
branch  0 taken 34% (fallthrough)
branch  1 taken 67%
        -:   74:    {
     1005:   75:        state->supplyCount[curse] = 10;
        -:   76:    }
     1995:   77:    else if (numPlayers == 3)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -:   78:    {
      994:   79:        state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:    else
        -:   82:    {
     1001:   83:        state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:    //set number of Victory cards
     3000:   87:    if (numPlayers == 2)
branch  0 taken 34% (fallthrough)
branch  1 taken 67%
        -:   88:    {
     1005:   89:        state->supplyCount[estate] = 8;
     1005:   90:        state->supplyCount[duchy] = 8;
     1005:   91:        state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:    else
        -:   94:    {
     1995:   95:        state->supplyCount[estate] = 12;
     1995:   96:        state->supplyCount[duchy] = 12;
     1995:   97:        state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:    //set number of Treasure cards
     3000:  101:    state->supplyCount[copper] = 60 - (7 * numPlayers);
     3000:  102:    state->supplyCount[silver] = 40;
     3000:  103:    state->supplyCount[gold] = 30;
        -:  104:
        -:  105:    //set number of Kingdom cards
    63000:  106:    for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  107:    {
   495000:  108:        for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  109:        {
   465000:  110:            if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  111:            {
        -:  112:                //check if card is a 'Victory' Kingdom card
    30000:  113:                if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  114:                {
     6000:  115:                    if (numPlayers == 2) {
branch  0 taken 34% (fallthrough)
branch  1 taken 67%
     1005:  116:                        state->supplyCount[i] = 8;
        -:  117:                    }
        -:  118:                    else {
     1995:  119:                        state->supplyCount[i] = 12;
        -:  120:                    }
        -:  121:                }
        -:  122:                else
        -:  123:                {
    27000:  124:                    state->supplyCount[i] = 10;
        -:  125:                }
    30000:  126:                break;
        -:  127:            }
        -:  128:            else    //card is not in the set choosen for the game
        -:  129:            {
   435000:  130:                state->supplyCount[i] = -1;
        -:  131:            }
        -:  132:        }
        -:  133:
        -:  134:    }
        -:  135:
        -:  136:    ////////////////////////
        -:  137:    //supply intilization complete
        -:  138:
        -:  139:    //set player decks
    11996:  140:    for (i = 0; i < numPlayers; i++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  141:    {
     8996:  142:        state->deckCount[i] = 0;
    35984:  143:        for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  144:        {
    26988:  145:            state->deck[i][j] = estate;
    26988:  146:            state->deckCount[i]++;
        -:  147:        }
    71968:  148:        for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  149:        {
    62972:  150:            state->deck[i][j] = copper;
    62972:  151:            state->deckCount[i]++;
        -:  152:        }
        -:  153:    }
        -:  154:
        -:  155:    //shuffle player decks
    11996:  156:    for (i = 0; i < numPlayers; i++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  157:    {
     8996:  158:        if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  159:        {
    #####:  160:            return -1;
        -:  161:        }
        -:  162:    }
        -:  163:
        -:  164:    //draw player hands
    11996:  165:    for (i = 0; i < numPlayers; i++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  166:    {
        -:  167:        //initialize hand size to zero
     8996:  168:        state->handCount[i] = 0;
     8996:  169:        state->discardCount[i] = 0;
        -:  170:        //draw 5 cards
        -:  171:        // for (j = 0; j < 5; j++)
        -:  172:        //	{
        -:  173:        //	  drawCard(i, state);
        -:  174:        //	}
        -:  175:    }
        -:  176:
        -:  177:    //set embargo tokens to 0 for all supply piles
    84000:  178:    for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  179:    {
    81000:  180:        state->embargoTokens[i] = 0;
        -:  181:    }
        -:  182:
        -:  183:    //initialize first player's turn
     3000:  184:    state->outpostPlayed = 0;
     3000:  185:    state->phase = 0;
     3000:  186:    state->numActions = 1;
     3000:  187:    state->numBuys = 1;
     3000:  188:    state->playedCardCount = 0;
     3000:  189:    state->whoseTurn = 0;
     3000:  190:    state->handCount[state->whoseTurn] = 0;
        -:  191:    //int it; move to top
        -:  192:
        -:  193:    //Moved draw cards to here, only drawing at the start of a turn
    18000:  194:    for (it = 0; it < 5; it++) {
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
    15000:  195:        drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  196:    }
        -:  197:
     3000:  198:    updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  199:
     3000:  200:    return 0;
        -:  201:}
        -:  202:
function shuffle called 18339 returned 100% blocks executed 100%
    18339:  203:int shuffle(int player, struct gameState *state) {
        -:  204:
        -:  205:
        -:  206:    int newDeck[MAX_DECK];
    18339:  207:    int newDeckPos = 0;
        -:  208:    int card;
        -:  209:    int i;
        -:  210:
    18339:  211:    if (state->deckCount[player] < 1)
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
       41:  212:        return -1;
    18298:  213:    qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
call    0 returned 100%
        -:  214:    /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  215:
   248167:  216:    while (state->deckCount[player] > 0) {
branch  0 taken 92%
branch  1 taken 8% (fallthrough)
   211571:  217:        card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
   211571:  218:        newDeck[newDeckPos] = state->deck[player][card];
   211571:  219:        newDeckPos++;
   756848:  220:        for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 72%
branch  1 taken 28% (fallthrough)
   545277:  221:            state->deck[player][i] = state->deck[player][i+1];
        -:  222:        }
   211571:  223:        state->deckCount[player]--;
        -:  224:    }
   229869:  225:    for (i = 0; i < newDeckPos; i++) {
branch  0 taken 92%
branch  1 taken 8% (fallthrough)
   211571:  226:        state->deck[player][i] = newDeck[i];
   211571:  227:        state->deckCount[player]++;
        -:  228:    }
        -:  229:
    18298:  230:    return 0;
        -:  231:}
        -:  232:
function playCard called 2000 returned 100% blocks executed 73%
     2000:  233:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  234:{
        -:  235:    int card;
     2000:  236:    int coin_bonus = 0; 		//tracks coins gain from actions
        -:  237:
        -:  238:    //check if it is the right phase
     2000:  239:    if (state->phase != 0)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  240:    {
    #####:  241:        return -1;
        -:  242:    }
        -:  243:
        -:  244:    //check if player has enough actions
     2000:  245:    if ( state->numActions < 1 )
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  246:    {
    #####:  247:        return -1;
        -:  248:    }
        -:  249:
        -:  250:    //get card played
     2000:  251:    card = handCard(handPos, state);
call    0 returned 100%
        -:  252:
        -:  253:    //check if selected card is an action
     2000:  254:    if ( card < adventurer || card > treasure_map )
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  255:    {
    #####:  256:        return -1;
        -:  257:    }
        -:  258:
        -:  259:    //play card
     2000:  260:    if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  261:    {
    #####:  262:        return -1;
        -:  263:    }
        -:  264:
        -:  265:    //reduce number of actions
     2000:  266:    state->numActions--;
        -:  267:
        -:  268:    //update coins (Treasure cards may be added with card draws)
     2000:  269:    updateCoins(state->whoseTurn, state, coin_bonus);
call    0 returned 100%
        -:  270:
     2000:  271:    return 0;
        -:  272:}
        -:  273:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  274:int buyCard(int supplyPos, struct gameState *state) {
        -:  275:    int who;
        -:  276:    if (DEBUG) {
        -:  277:        printf("Entering buyCard...\n");
        -:  278:    }
        -:  279:
        -:  280:    // I don't know what to do about the phase thing.
        -:  281:
    #####:  282:    who = state->whoseTurn;
        -:  283:
    #####:  284:    if (state->numBuys < 1) {
branch  0 never executed
branch  1 never executed
        -:  285:        if (DEBUG)
        -:  286:            printf("You do not have any buys left\n");
    #####:  287:        return -1;
    #####:  288:    } else if (supplyCount(supplyPos, state) <1) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  289:        if (DEBUG)
        -:  290:            printf("There are not any of that type of card left\n");
    #####:  291:        return -1;
    #####:  292:    } else if (state->coins < getCost(supplyPos)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  293:        if (DEBUG)
        -:  294:            printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  295:        return -1;
        -:  296:    } else {
    #####:  297:        state->phase=1;
        -:  298:        //state->supplyCount[supplyPos]--;
    #####:  299:        gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  300:
    #####:  301:        state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  302:        state->numBuys--;
        -:  303:        if (DEBUG)
        -:  304:            printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  305:    }
        -:  306:
        -:  307:    //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  308:    //state->discardCount[who]++;
        -:  309:
    #####:  310:    return 0;
        -:  311:}
        -:  312:
function numHandCards called 3096 returned 100% blocks executed 100%
     3096:  313:int numHandCards(struct gameState *state) {
     3096:  314:    return state->handCount[ whoseTurn(state) ];
call    0 returned 100%
        -:  315:}
        -:  316:
function handCard called 2000 returned 100% blocks executed 100%
     2000:  317:int handCard(int handPos, struct gameState *state) {
     2000:  318:    int currentPlayer = whoseTurn(state);
call    0 returned 100%
     2000:  319:    return state->hand[currentPlayer][handPos];
        -:  320:}
        -:  321:
function supplyCount called 1756 returned 100% blocks executed 100%
     1756:  322:int supplyCount(int card, struct gameState *state) {
     1756:  323:    return state->supplyCount[card];
        -:  324:}
        -:  325:
function fullDeckCount called 2996 returned 100% blocks executed 82%
     2996:  326:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  327:    int i;
     2996:  328:    int count = 0;
        -:  329:
    30752:  330:    for (i = 0; i < state->deckCount[player]; i++)
branch  0 taken 90%
branch  1 taken 10% (fallthrough)
        -:  331:    {
    27756:  332:        if (state->deck[player][i] == card) count++;
branch  0 taken 7% (fallthrough)
branch  1 taken 93%
        -:  333:    }
        -:  334:
    17976:  335:    for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -:  336:    {
    14980:  337:        if (state->hand[player][i] == card) count++;
branch  0 taken 7% (fallthrough)
branch  1 taken 93%
        -:  338:    }
        -:  339:
     2996:  340:    for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
        -:  341:    {
    #####:  342:        if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  343:    }
        -:  344:
     2996:  345:    return count;
        -:  346:}
        -:  347:
function whoseTurn called 7096 returned 100% blocks executed 100%
     7096:  348:int whoseTurn(struct gameState *state) {
     7096:  349:    return state->whoseTurn;
        -:  350:}
        -:  351:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  352:int endTurn(struct gameState *state) {
        -:  353:    int k;
        -:  354:    int i;
    #####:  355:    int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  356:
        -:  357:    //Discard hand
    #####:  358:    for (i = 0; i < state->handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  359:        state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  360:        state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  361:    }
    #####:  362:    state->handCount[currentPlayer] = 0;//Reset hand count
        -:  363:
        -:  364:    //Code for determining the player
    #####:  365:    if (currentPlayer < (state->numPlayers - 1)) {
branch  0 never executed
branch  1 never executed
    #####:  366:        state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  367:    }
        -:  368:    else {
    #####:  369:        state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  370:    }
        -:  371:
    #####:  372:    state->outpostPlayed = 0;
    #####:  373:    state->phase = 0;
    #####:  374:    state->numActions = 1;
    #####:  375:    state->coins = 0;
    #####:  376:    state->numBuys = 1;
    #####:  377:    state->playedCardCount = 0;
    #####:  378:    state->handCount[state->whoseTurn] = 0;
        -:  379:
        -:  380:    //int k; move to top
        -:  381:    //Next player draws hand
    #####:  382:    for (k = 0; k < 5; k++) {
branch  0 never executed
branch  1 never executed
    #####:  383:        drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  384:    }
        -:  385:
        -:  386:    //Update money
    #####:  387:    updateCoins(state->whoseTurn, state, 0);
call    0 never executed
        -:  388:
    #####:  389:    return 0;
        -:  390:}
        -:  391:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  392:int isGameOver(struct gameState *state) {
        -:  393:    int i;
        -:  394:    int j;
        -:  395:
        -:  396:    //if stack of Province cards is empty, the game ends
    #####:  397:    if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  398:    {
    #####:  399:        return 1;
        -:  400:    }
        -:  401:
        -:  402:    //if three supply pile are at 0, the game ends
    #####:  403:    j = 0;
    #####:  404:    for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  405:    {
    #####:  406:        if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  407:        {
    #####:  408:            j++;
        -:  409:        }
        -:  410:    }
    #####:  411:    if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  412:    {
    #####:  413:        return 1;
        -:  414:    }
        -:  415:
    #####:  416:    return 0;
        -:  417:}
        -:  418:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  419:int scoreFor (int player, struct gameState *state) {
        -:  420:
        -:  421:    int i;
    #####:  422:    int score = 0;
        -:  423:    //score from hand
    #####:  424:    for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  425:    {
    #####:  426:        if (state->hand[player][i] == curse) {
branch  0 never executed
branch  1 never executed
    #####:  427:            score = score - 1;
        -:  428:        };
    #####:  429:        if (state->hand[player][i] == estate) {
branch  0 never executed
branch  1 never executed
    #####:  430:            score = score + 1;
        -:  431:        };
    #####:  432:        if (state->hand[player][i] == duchy) {
branch  0 never executed
branch  1 never executed
    #####:  433:            score = score + 3;
        -:  434:        };
    #####:  435:        if (state->hand[player][i] == province) {
branch  0 never executed
branch  1 never executed
    #####:  436:            score = score + 6;
        -:  437:        };
    #####:  438:        if (state->hand[player][i] == great_hall) {
branch  0 never executed
branch  1 never executed
    #####:  439:            score = score + 1;
        -:  440:        };
    #####:  441:        if (state->hand[player][i] == gardens) {
branch  0 never executed
branch  1 never executed
    #####:  442:            score = score + ( fullDeckCount(player, 0, state) / 10 );
call    0 never executed
        -:  443:        };
        -:  444:    }
        -:  445:
        -:  446:    //score from discard
    #####:  447:    for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  448:    {
    #####:  449:        if (state->discard[player][i] == curse) {
branch  0 never executed
branch  1 never executed
    #####:  450:            score = score - 1;
        -:  451:        };
    #####:  452:        if (state->discard[player][i] == estate) {
branch  0 never executed
branch  1 never executed
    #####:  453:            score = score + 1;
        -:  454:        };
    #####:  455:        if (state->discard[player][i] == duchy) {
branch  0 never executed
branch  1 never executed
    #####:  456:            score = score + 3;
        -:  457:        };
    #####:  458:        if (state->discard[player][i] == province) {
branch  0 never executed
branch  1 never executed
    #####:  459:            score = score + 6;
        -:  460:        };
    #####:  461:        if (state->discard[player][i] == great_hall) {
branch  0 never executed
branch  1 never executed
    #####:  462:            score = score + 1;
        -:  463:        };
    #####:  464:        if (state->discard[player][i] == gardens) {
branch  0 never executed
branch  1 never executed
    #####:  465:            score = score + ( fullDeckCount(player, 0, state) / 10 );
call    0 never executed
        -:  466:        };
        -:  467:    }
        -:  468:
        -:  469:    //score from deck
    #####:  470:    for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  471:    {
    #####:  472:        if (state->deck[player][i] == curse) {
branch  0 never executed
branch  1 never executed
    #####:  473:            score = score - 1;
        -:  474:        };
    #####:  475:        if (state->deck[player][i] == estate) {
branch  0 never executed
branch  1 never executed
    #####:  476:            score = score + 1;
        -:  477:        };
    #####:  478:        if (state->deck[player][i] == duchy) {
branch  0 never executed
branch  1 never executed
    #####:  479:            score = score + 3;
        -:  480:        };
    #####:  481:        if (state->deck[player][i] == province) {
branch  0 never executed
branch  1 never executed
    #####:  482:            score = score + 6;
        -:  483:        };
    #####:  484:        if (state->deck[player][i] == great_hall) {
branch  0 never executed
branch  1 never executed
    #####:  485:            score = score + 1;
        -:  486:        };
    #####:  487:        if (state->deck[player][i] == gardens) {
branch  0 never executed
branch  1 never executed
    #####:  488:            score = score + ( fullDeckCount(player, 0, state) / 10 );
call    0 never executed
        -:  489:        };
        -:  490:    }
        -:  491:
    #####:  492:    return score;
        -:  493:}
        -:  494:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  495:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  496:    int i;
        -:  497:    int j;
        -:  498:    int highScore;
        -:  499:    int currentPlayer;
        -:  500:
        -:  501:    //get score for each player
    #####:  502:    for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  503:    {
        -:  504:        //set unused player scores to -9999
    #####:  505:        if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  506:        {
    #####:  507:            players[i] = -9999;
        -:  508:        }
        -:  509:        else
        -:  510:        {
    #####:  511:            players[i] = scoreFor (i, state);
call    0 never executed
        -:  512:        }
        -:  513:    }
        -:  514:
        -:  515:    //find highest score
    #####:  516:    j = 0;
    #####:  517:    for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  518:    {
    #####:  519:        if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  520:        {
    #####:  521:            j = i;
        -:  522:        }
        -:  523:    }
    #####:  524:    highScore = players[j];
        -:  525:
        -:  526:    //add 1 to players who had less turns
    #####:  527:    currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  528:    for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  529:    {
    #####:  530:        if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  531:        {
    #####:  532:            players[i]++;
        -:  533:        }
        -:  534:    }
        -:  535:
        -:  536:    //find new highest score
    #####:  537:    j = 0;
    #####:  538:    for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  539:    {
    #####:  540:        if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  541:        {
    #####:  542:            j = i;
        -:  543:        }
        -:  544:    }
    #####:  545:    highScore = players[j];
        -:  546:
        -:  547:    //set winners in array to 1 and rest to 0
    #####:  548:    for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  549:    {
    #####:  550:        if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  551:        {
    #####:  552:            players[i] = 1;
        -:  553:        }
        -:  554:        else
        -:  555:        {
    #####:  556:            players[i] = 0;
        -:  557:        }
        -:  558:    }
        -:  559:
    #####:  560:    return 0;
        -:  561:}
        -:  562:
function drawCard called 57632 returned 100% blocks executed 100%
    57632:  563:int drawCard(int player, struct gameState *state)
        -:  564:{   int count;
        -:  565:    int deckCounter;
    57632:  566:    if (state->deckCount[player] <= 0) { //Deck is empty
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -:  567:
        -:  568:        //Step 1 Shuffle the discard pile back into a deck
        -:  569:        int i;
        -:  570:        //Move discard to deck
     1877:  571:        for (i = 0; i < state->discardCount[player]; i++) {
branch  0 taken 82%
branch  1 taken 18% (fallthrough)
     1530:  572:            state->deck[player][i] = state->discard[player][i];
     1530:  573:            state->discard[player][i] = -1;
        -:  574:        }
        -:  575:
      347:  576:        state->deckCount[player] = state->discardCount[player];
      347:  577:        state->discardCount[player] = 0;//Reset discard
        -:  578:
        -:  579:        //Shufffle the deck
      347:  580:        shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 returned 100%
        -:  581:
        -:  582:        if (DEBUG) { //Debug statements
        -:  583:            printf("Deck count now: %d\n", state->deckCount[player]);
        -:  584:        }
        -:  585:
      347:  586:        state->discardCount[player] = 0;
        -:  587:
        -:  588:        //Step 2 Draw Card
      347:  589:        count = state->handCount[player];//Get current player's hand count
        -:  590:
        -:  591:        if (DEBUG) { //Debug statements
        -:  592:            printf("Current hand count: %d\n", count);
        -:  593:        }
        -:  594:
      347:  595:        deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  596:
      347:  597:        if (deckCounter == 0)
branch  0 taken 12% (fallthrough)
branch  1 taken 88%
       41:  598:            return -1;
        -:  599:
      306:  600:        state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
      306:  601:        state->deckCount[player]--;
      306:  602:        state->handCount[player]++;//Increment hand count
        -:  603:    }
        -:  604:
        -:  605:    else {
    57285:  606:        int count = state->handCount[player];//Get current hand count for player
        -:  607:        int deckCounter;
        -:  608:        if (DEBUG) { //Debug statements
        -:  609:            printf("Current hand count: %d\n", count);
        -:  610:        }
        -:  611:
    57285:  612:        deckCounter = state->deckCount[player];//Create holder for the deck count
    57285:  613:        state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
    57285:  614:        state->deckCount[player]--;
    57285:  615:        state->handCount[player]++;//Increment hand count
        -:  616:    }
        -:  617:
    57591:  618:    return 0;
        -:  619:}
        -:  620:
function getCost called 0 returned 0% blocks executed 0%
    #####:  621:int getCost(int cardNumber)
        -:  622:{
    #####:  623:    switch( cardNumber )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  624:    {
    #####:  625:    case curse:
    #####:  626:        return 0;
    #####:  627:    case estate:
    #####:  628:        return 2;
    #####:  629:    case duchy:
    #####:  630:        return 5;
    #####:  631:    case province:
    #####:  632:        return 8;
    #####:  633:    case copper:
    #####:  634:        return 0;
    #####:  635:    case silver:
    #####:  636:        return 3;
    #####:  637:    case gold:
    #####:  638:        return 6;
    #####:  639:    case adventurer:
    #####:  640:        return 6;
    #####:  641:    case council_room:
    #####:  642:        return 5;
    #####:  643:    case feast:
    #####:  644:        return 4;
    #####:  645:    case gardens:
    #####:  646:        return 4;
    #####:  647:    case mine:
    #####:  648:        return 5;
    #####:  649:    case remodel:
    #####:  650:        return 4;
    #####:  651:    case smithy:
    #####:  652:        return 4;
    #####:  653:    case village:
    #####:  654:        return 3;
    #####:  655:    case baron:
    #####:  656:        return 4;
    #####:  657:    case great_hall:
    #####:  658:        return 3;
    #####:  659:    case minion:
    #####:  660:        return 5;
    #####:  661:    case steward:
    #####:  662:        return 3;
    #####:  663:    case tribute:
    #####:  664:        return 5;
    #####:  665:    case ambassador:
    #####:  666:        return 3;
    #####:  667:    case cutpurse:
    #####:  668:        return 4;
    #####:  669:    case embargo:
    #####:  670:        return 2;
    #####:  671:    case outpost:
    #####:  672:        return 5;
    #####:  673:    case salvager:
    #####:  674:        return 4;
    #####:  675:    case sea_hag:
    #####:  676:        return 4;
    #####:  677:    case treasure_map:
    #####:  678:        return 4;
        -:  679:    }
        -:  680:
    #####:  681:    return -1;
        -:  682:}
        -:  683:
function cardEffect called 2000 returned 100% blocks executed 5%
     2000:  684:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  685:{
        -:  686:    int i;
        -:  687:    int j;
        -:  688:    int k;
        -:  689:    int x;
        -:  690:    int index;
     2000:  691:    int currentPlayer = whoseTurn(state);
call    0 returned 100%
     2000:  692:    int nextPlayer = currentPlayer + 1;
        -:  693:
     2000:  694:    int tributeRevealedCards[2] = {-1, -1};
        -:  695:    int temphand[MAX_HAND];// moved above the if statement
     2000:  696:    int drawntreasure=0;
        -:  697:    int cardDrawn;
     2000:  698:    int z = 0;// this is the counter for the temp hand
     2000:  699:    if (nextPlayer > (state->numPlayers - 1)) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  700:        nextPlayer = 0;
        -:  701:    }
        -:  702:
        -:  703:
        -:  704:    //uses switch to select card and perform actions
     2000:  705:    switch( card )
branch  0 taken 0%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 0%
branch  7 taken 0%
branch  8 taken 50%
branch  9 taken 0%
branch 10 taken 50%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  706:    {
    #####:  707:    case adventurer:
    #####:  708:        while(drawntreasure<2) {
branch  0 never executed
branch  1 never executed
    #####:  709:            if (state->deckCount[currentPlayer] <1) { //if the deck is empty we need to shuffle discard and add to deck
branch  0 never executed
branch  1 never executed
    #####:  710:                shuffle(currentPlayer, state);
call    0 never executed
        -:  711:            }
    #####:  712:            drawCard(currentPlayer, state);
call    0 never executed
    #####:  713:            cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####:  714:            if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  715:                drawntreasure++;
        -:  716:            else {
    #####:  717:                temphand[z]=cardDrawn;
    #####:  718:                state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  719:                z++;
        -:  720:            }
        -:  721:        }
    #####:  722:        while(z-1>=0) {
branch  0 never executed
branch  1 never executed
    #####:  723:            state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  724:            z=z-1;
        -:  725:        }
    #####:  726:        return 0;
        -:  727:
    #####:  728:    case council_room:
        -:  729:        //+4 Cards
    #####:  730:        for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  731:        {
    #####:  732:            drawCard(currentPlayer, state);
call    0 never executed
        -:  733:        }
        -:  734:
        -:  735:        //+1 Buy
    #####:  736:        state->numBuys++;
        -:  737:
        -:  738:        //Each other player draws a card
    #####:  739:        for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  740:        {
    #####:  741:            if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -:  742:            {
    #####:  743:                drawCard(i, state);
call    0 never executed
        -:  744:            }
        -:  745:        }
        -:  746:
        -:  747:        //put played card in played card pile
    #####:  748:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  749:
    #####:  750:        return 0;
        -:  751:
    #####:  752:    case feast:
        -:  753:        //gain card with cost up to 5
        -:  754:        //Backup hand
    #####:  755:        for (i = 0; i <= state->handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  756:            temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  757:            state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  758:        }
        -:  759:        //Backup hand
        -:  760:
        -:  761:        //Update Coins for Buy
    #####:  762:        updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  763:        x = 1;//Condition to loop on
    #####:  764:        while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  765:            if (supplyCount(choice1, state) <= 0) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  766:                if (DEBUG)
        -:  767:                    printf("None of that card left, sorry!\n");
        -:  768:
        -:  769:                if (DEBUG) {
        -:  770:                    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  771:                }
        -:  772:            }
    #####:  773:            else if (state->coins < getCost(choice1)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  774:                printf("That card is too expensive!\n");
call    0 never executed
        -:  775:
        -:  776:                if (DEBUG) {
        -:  777:                    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  778:                }
        -:  779:            }
        -:  780:            else {
        -:  781:
        -:  782:                if (DEBUG) {
        -:  783:                    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  784:                }
        -:  785:
    #####:  786:                gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  787:                x = 0;//No more buying cards
        -:  788:
        -:  789:                if (DEBUG) {
        -:  790:                    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  791:                }
        -:  792:
        -:  793:            }
        -:  794:        }
        -:  795:
        -:  796:        //Reset Hand
    #####:  797:        for (i = 0; i <= state->handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  798:            state->hand[currentPlayer][i] = temphand[i];
    #####:  799:            temphand[i] = -1;
        -:  800:        }
        -:  801:        //Reset Hand
        -:  802:
    #####:  803:        return 0;
        -:  804:
    #####:  805:    case gardens:
    #####:  806:        return -1;
        -:  807:
    #####:  808:    case mine:
    #####:  809:		play_mine(choice1, choice2, currentPlayer, state, handPos);
call    0 never executed
        -:  810:
    #####:  811:    case remodel:
    #####:  812:        j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  813:
    #####:  814:        if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  815:        {
    #####:  816:            return -1;
        -:  817:        }
        -:  818:
    #####:  819:        gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  820:
        -:  821:        //discard card from hand
    #####:  822:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  823:
        -:  824:        //discard trashed card
    #####:  825:        for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  826:        {
    #####:  827:            if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  828:            {
    #####:  829:                discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####:  830:                break;
        -:  831:            }
        -:  832:        }
        -:  833:
        -:  834:
    #####:  835:        return 0;
        -:  836:
    #####:  837:    case smithy:
        -:  838:        //+3 Cards
    #####:  839:        for (i = 0; i < 3; i++)
branch  0 never executed
branch  1 never executed
        -:  840:        {
    #####:  841:            drawCard(currentPlayer, state);
call    0 never executed
        -:  842:        }
        -:  843:
        -:  844:        //discard card from hand
    #####:  845:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  846:        return 0;
        -:  847:
    #####:  848:    case village:
        -:  849:        //+1 Card
    #####:  850:        drawCard(currentPlayer, state);
call    0 never executed
        -:  851:
        -:  852:        //+2 Actions
    #####:  853:        state->numActions = state->numActions + 2;
        -:  854:
        -:  855:        //discard played card from hand
    #####:  856:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  857:        return 0;
        -:  858:
     1000:  859:    case baron:
     1000:  860:		return play_baron(choice1, currentPlayer, state, handPos, bonus);
call    0 returned 100%
        -:  861:
        -:  862:
    #####:  863:    case great_hall:
        -:  864:        //+1 Card
    #####:  865:        drawCard(currentPlayer, state);
call    0 never executed
        -:  866:
        -:  867:        //+1 Actions
    #####:  868:        state->numActions++;
        -:  869:
        -:  870:        //discard card from hand
    #####:  871:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  872:        return 0;
        -:  873:
     1000:  874:    case minion:
     1000:  875:		return play_minion(choice1, choice2, currentPlayer, state, handPos, bonus);
call    0 returned 100%
        -:  876:
    #####:  877:    case steward:
    #####:  878:        if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  879:        {
        -:  880:            //+2 cards
    #####:  881:            drawCard(currentPlayer, state);
call    0 never executed
    #####:  882:            drawCard(currentPlayer, state);
call    0 never executed
        -:  883:        }
    #####:  884:        else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -:  885:        {
        -:  886:            //+2 coins
    #####:  887:            state->coins = state->coins + 2;
        -:  888:        }
        -:  889:        else
        -:  890:        {
        -:  891:            //trash 2 cards in hand
    #####:  892:            discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####:  893:            discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -:  894:        }
        -:  895:
        -:  896:        //discard card from hand
    #####:  897:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  898:        return 0;
        -:  899:
    #####:  900:    case tribute:
    #####:  901:		play_tribute(tributeRevealedCards, currentPlayer, nextPlayer, state, handPos, bonus);
call    0 never executed
        -:  902:
    #####:  903:    case ambassador:
    #####:  904:		play_ambassador(choice1, choice2, currentPlayer, state, handPos);
call    0 never executed
        -:  905:
    #####:  906:    case cutpurse:
        -:  907:
    #####:  908:        updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####:  909:        for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  910:        {
    #####:  911:            if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  912:            {
    #####:  913:                for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -:  914:                {
    #####:  915:                    if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -:  916:                    {
    #####:  917:                        discardCard(j, i, state, 0);
call    0 never executed
    #####:  918:                        break;
        -:  919:                    }
    #####:  920:                    if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -:  921:                    {
    #####:  922:                        for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -:  923:                        {
        -:  924:                            if (DEBUG)
        -:  925:                                printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -:  926:                        }
    #####:  927:                        break;
        -:  928:                    }
        -:  929:                }
        -:  930:
        -:  931:            }
        -:  932:
        -:  933:        }
        -:  934:
        -:  935:        //discard played card from hand
    #####:  936:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  937:
    #####:  938:        return 0;
        -:  939:
        -:  940:
    #####:  941:    case embargo:
        -:  942:        //+2 Coins
    #####:  943:        state->coins = state->coins + 2;
        -:  944:
        -:  945:        //see if selected pile is in play
    #####:  946:        if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -:  947:        {
    #####:  948:            return -1;
        -:  949:        }
        -:  950:
        -:  951:        //add embargo token to selected supply pile
    #####:  952:        state->embargoTokens[choice1]++;
        -:  953:
        -:  954:        //trash card
    #####:  955:        discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####:  956:        return 0;
        -:  957:
    #####:  958:    case outpost:
        -:  959:        //set outpost flag
    #####:  960:        state->outpostPlayed++;
        -:  961:
        -:  962:        //discard card
    #####:  963:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  964:        return 0;
        -:  965:
    #####:  966:    case salvager:
        -:  967:        //+1 buy
    #####:  968:        state->numBuys++;
        -:  969:
    #####:  970:        if (choice1)
branch  0 never executed
branch  1 never executed
        -:  971:        {
        -:  972:            //gain coins equal to trashed card
    #####:  973:            state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -:  974:            //trash card
    #####:  975:            discardCard(choice1, currentPlayer, state, 1);
call    0 never executed
        -:  976:        }
        -:  977:
        -:  978:        //discard card
    #####:  979:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  980:        return 0;
        -:  981:
    #####:  982:    case sea_hag:
    #####:  983:        for (i = 0; i < state->numPlayers; i++) {
branch  0 never executed
branch  1 never executed
    #####:  984:            if (i != currentPlayer) {
branch  0 never executed
branch  1 never executed
    #####:  985:                state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];
    #####:  986:                state->deckCount[i]--;
    #####:  987:                state->discardCount[i]++;
    #####:  988:                state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -:  989:            }
        -:  990:        }
    #####:  991:        return 0;
        -:  992:
    #####:  993:    case treasure_map:
        -:  994:        //search hand for another treasure_map
    #####:  995:        index = -1;
    #####:  996:        for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  997:        {
    #####:  998:            if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  999:            {
    #####: 1000:                index = i;
    #####: 1001:                break;
        -: 1002:            }
        -: 1003:        }
    #####: 1004:        if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1005:        {
        -: 1006:            //trash both treasure cards
    #####: 1007:            discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1008:            discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1009:
        -: 1010:            //gain 4 Gold cards
    #####: 1011:            for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1012:            {
    #####: 1013:                gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1014:            }
        -: 1015:
        -: 1016:            //return success
    #####: 1017:            return 1;
        -: 1018:        }
        -: 1019:
        -: 1020:        //no second treasure_map found in hand
    #####: 1021:        return -1;
        -: 1022:    }
        -: 1023:
    #####: 1024:    return -1;
        -: 1025:}
        -: 1026:
function play_baron called 1000 returned 100% blocks executed 100%
     1000: 1027:int play_baron(int choice1, int currentPlayer, struct gameState *state, int handPos, int *bonus) {
     1000: 1028:	state->numBuys++;//Increase buys by 1!
     1000: 1029:	if (choice1 > 0) 
branch  0 taken 48% (fallthrough)
branch  1 taken 52%
        -: 1030:	{ //Boolean true or going to discard an estate
      484: 1031:		int p = 0;//Iterator for hand!
      484: 1032:		int card_not_discarded = 1;//Flag for discard set!
     3779: 1033:		while (card_not_discarded) 
branch  0 taken 85%
branch  1 taken 15% (fallthrough)
        -: 1034:		{
        -: 1035:
     2811: 1036:			if (state->hand[currentPlayer][p] == estate) 
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
        -: 1037:			{ //Found an estate card!
      122: 1038:				*bonus = 4;//Add 4 coins to the amount of coins # fix to this...bonus is added after the card is played in updateCoind in playCard()...this is more logical and it prevents potencial incorrect calculation
      122: 1039:				state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
      122: 1040:				state->discardCount[currentPlayer]++;
        -: 1041:
      577: 1042:				for (; p < state->handCount[currentPlayer]; p++) 
branch  0 taken 79%
branch  1 taken 21% (fallthrough)
        -: 1043:				{
      455: 1044:					state->hand[currentPlayer][p] = state->hand[currentPlayer][p + 1];
        -: 1045:				}
        -: 1046:				//state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;   // introduced bug 1 in baron. forget to remove the card
        -: 1047:				
      122: 1048:				state->handCount[currentPlayer]--;
      122: 1049:				card_not_discarded = 0;//Exit the loop
        -: 1050:			}
        -: 1051:
     2689: 1052:			else if (p > state->handCount[currentPlayer]) 
branch  0 taken 13% (fallthrough)
branch  1 taken 87%
        -: 1053:			{
        -: 1054:
        -: 1055:				if (DEBUG) 
        -: 1056:				{
        -: 1057:					printf("No estate cards in your hand, invalid choice\n");
        -: 1058:					printf("Must gain an estate if there are any\n");
        -: 1059:				}
        -: 1060:
      362: 1061:				if (supplyCount(estate, state) > 0) 
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        -: 1062:				{
        -: 1063:
      362: 1064:					gainCard(estate, state, 0, currentPlayer);
call    0 returned 100%
        -: 1065:
      362: 1066:					state->supplyCount[estate]--;//Decrement estates
        -: 1067:					//if (supplyCount(estate, state) == 0) {
        -: 1068:					//	isGameOver(state);
        -: 1069:					//} # it appears that the end game check here is unnecessary becasue the endgame check alway happens at the end of the turn
        -: 1070:				}
      362: 1071:				card_not_discarded = 0;//Exit the loop
        -: 1072:			}
        -: 1073:
        -: 1074:			else 
        -: 1075:			{
     2327: 1076:				p++;//Next card
        -: 1077:			}
        -: 1078:		}
        -: 1079:	}
        -: 1080:
        -: 1081:	else 
        -: 1082:	{
        -: 1083:
      516: 1084:		if (supplyCount(estate, state) > 0) 
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        -: 1085:		{
        -: 1086:
      516: 1087:			gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 returned 100%
        -: 1088:
      516: 1089:			state->supplyCount[estate]--;//Decrement Estates
        -: 1090:			//if (supplyCount(estate, state) == 0) {
        -: 1091:			//	isGameOver(state);
        -: 1092:			//} # same as above, the isGameOver check here is unnecessary
        -: 1093:		}
        -: 1094:	}
        -: 1095:	// needs to discard the card baron at the end of the cardeffect
     1000: 1096:	discardCard(handPos, currentPlayer, state, 1);  //introduced bug 2 here, wrong discard flag here (1 stands for trash)
call    0 returned 100%
     1000: 1097:	return 0;
        -: 1098:}
        -: 1099:
function play_minion called 1000 returned 100% blocks executed 96%
     1000: 1100:int play_minion(int choice1, int choice2, int currentPlayer, struct gameState *state, int handPos, int *bonus) {
        -: 1101:	//+1 action
        -: 1102:	//state->numActions++; //miss the +1 action bug 1
        -: 1103:	int i,j;
        -: 1104:
     1000: 1105:	if (choice1)
branch  0 taken 48% (fallthrough)
branch  1 taken 52%
        -: 1106:	{
      484: 1107:		*bonus = 2; // same as the bug in baron, set bonus to 2 so that the updateCoins in playcard() works correctly.
        -: 1108:	}
      516: 1109:	else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 1110:	{
        -: 1111:		//discard hand
      516: 1112:		i = 0;
     3612: 1113:		while (numHandCards(state) > 0)
call    0 returned 100%
branch  1 taken 83%
branch  2 taken 17% (fallthrough)
        -: 1114:		{
     2580: 1115:			discardCard(i, currentPlayer, state, 0);
call    0 returned 100%
     2580: 1116:			i++; // bug 2 here because discardCard actually replace the discarded card with another card in hand, +1 would skip some cards.
        -: 1117:		}
        -: 1118:
        -: 1119:		//draw 4
     2580: 1120:		for (i = 0; i < 4; i++)
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -: 1121:		{
     2064: 1122:			drawCard(currentPlayer, state);
call    0 returned 100%
        -: 1123:		}
        -: 1124:
        -: 1125:		//other players discard hand and redraw if hand size > 4
     2051: 1126:		for (i = 0; i < state->numPlayers; i++)
branch  0 taken 75%
branch  1 taken 25%
        -: 1127:		{
     1535: 1128:			if (i != currentPlayer)
branch  0 taken 66% (fallthrough)
branch  1 taken 34%
        -: 1129:			{
     1019: 1130:				if (state->handCount[i] > 4)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 1131:				{
        -: 1132:					//discard hand
     7133: 1133:					while (state->handCount[i] > 0)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -: 1134:					{
     5095: 1135:						discardCard(0, i, state, 0);
call    0 returned 100%
        -: 1136:					}
        -: 1137:
        -: 1138:					//draw 4
     5095: 1139:					for (j = 0; j < 4; j++)
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -: 1140:					{
     4076: 1141:						drawCard(i, state);
call    0 returned 100%
        -: 1142:					}
        -: 1143:				}
        -: 1144:			}
        -: 1145:		}
        -: 1146:
        -: 1147:	}
        -: 1148:	else
    #####: 1149:		return -1;//the if else if structure need an else statement to be rigid
        -: 1150:
        -: 1151:	//discard card from hand
     1000: 1152:	discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        -: 1153:
     1000: 1154:	return 0;
        -: 1155:
        -: 1156:}
        -: 1157:
function play_ambassador called 0 returned 0% blocks executed 0%
    #####: 1158:int play_ambassador(int choice1, int choice2, int currentPlayer, struct gameState *state, int handPos) {
        -: 1159:	int i,j;
    #####: 1160:	j = 0;		//used to check if player has enough cards to discard
        -: 1161:
    #####: 1162:	if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1163:	{
    #####: 1164:		return -1;
        -: 1165:	}
        -: 1166:
    #####: 1167:	if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1168:	{
    #####: 1169:		return -1;
        -: 1170:	}
        -: 1171:
    #####: 1172:	for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1173:	{
    #####: 1174:		if (i != handPos && state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])// bug 1 here, forget to skip the revealed card, which means that revealed card could be returned to supply
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1175:		{
    #####: 1176:			j++;
        -: 1177:		}
        -: 1178:	}
    #####: 1179:	if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1180:	{
    #####: 1181:		return -1;
        -: 1182:	}
        -: 1183:
        -: 1184:	if (DEBUG)
        -: 1185:		printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1186:
        -: 1187:	//trash copies of cards returned to supply, move this part forward simply because of card description. 
    #####: 1188:	for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1189:	{
    #####: 1190:		for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1191:		{
    #####: 1192:			if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1193:			{
    #####: 1194:				discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1195:				break;
        -: 1196:			}
        -: 1197:		}
        -: 1198:	}
        -: 1199:
        -: 1200:	//increase supply count for chosen card by amount being discarded
    #####: 1201:	state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1202:
        -: 1203:	//each other player gains a copy of revealed card
    #####: 1204:	for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1205:	{
    #####: 1206:		if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1207:		{
    #####: 1208:			gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
    #####: 1209:			state->supplyCount[state->hand[currentPlayer][choice1]]--;//introduce bug2 here. supplyCount is reduced in gainCard(). this is redundant.
        -: 1210:		}
        -: 1211:	}
        -: 1212:
        -: 1213:	//discard played card from hand
    #####: 1214:	discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1215:	return 0;
        -: 1216:
        -: 1217:}
        -: 1218:
function play_tribute called 1000 returned 100% blocks executed 82%
     1000: 1219:int play_tribute(int *tributeRevealedCards,int currentPlayer, int nextPlayer, struct gameState *state, int handPos, int *bonus ) {
        -: 1220:	int i;
        -: 1221:	//check next players decks to make sure that tribute could work
     1000: 1222:	if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1) 
branch  0 taken 8% (fallthrough)
branch  1 taken 92%
        -: 1223:	{
        -: 1224:		//if next player's deck has only 1 card
       83: 1225:		if (state->deckCount[nextPlayer] > 0) 
branch  0 taken 51% (fallthrough)
branch  1 taken 49%
        -: 1226:		{
       42: 1227:			tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
       42: 1228:			state->deckCount[nextPlayer]--;
        -: 1229:		}
        -: 1230:		//if next player's deck has no card and discard pile has one card
       41: 1231:		else if (state->discardCount[nextPlayer] > 0) 
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1232:		{
    #####: 1233:			tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer] - 1];
    #####: 1234:			state->discardCount[nextPlayer]--;
        -: 1235:		}
        -: 1236:		else 
        -: 1237:		{
        -: 1238:			//No Card to Reveal
        -: 1239:			if (DEBUG) 
        -: 1240:			{
        -: 1241:				printf("No cards to reveal\n");
        -: 1242:			}
        -: 1243:		}
        -: 1244:	}
        -: 1245:
        -: 1246:	else 
        -: 1247:	{
        -: 1248:		//if no cards available in deck
      917: 1249:		if (state->deckCount[nextPlayer] == 0) 
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1250:		{
    #####: 1251:			for (i = 0; i < state->discardCount[nextPlayer]; i++) 
branch  0 never executed
branch  1 never executed
        -: 1252:			{
    #####: 1253:				state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1254:				state->deckCount[nextPlayer]++;
    #####: 1255:				state->discard[nextPlayer][i] = -1;
    #####: 1256:				state->discardCount[nextPlayer]--;
        -: 1257:			}
        -: 1258:
    #####: 1259:			shuffle(nextPlayer, state);//Shuffle the deck
call    0 never executed
        -: 1260:		}
      917: 1261:		tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer] ];// bug 1 , forget to -1 which means that it checks an non existing card
      917: 1262:		state->deck[nextPlayer][state->deckCount[nextPlayer]-1] = -1; // there is a error here because the -- works after this statement is executed. I change the -- sign to -1 just like line 1326
      917: 1263:		state->deckCount[nextPlayer]--;
      917: 1264:		tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer] ];//same
      917: 1265:		state->deck[nextPlayer][state->deckCount[nextPlayer]-1] = -1;
      917: 1266:		state->deckCount[nextPlayer]--;
        -: 1267:
      917: 1268:		state->playedCardCount+=2; // bug 2, revealed cards need to be discarded but the update to discard pile is incomplete here.
        -: 1269:	}
        -: 1270:
     1000: 1271:	if (tributeRevealedCards[0] == tributeRevealedCards[1]) 
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1272:	{ //If we have a duplicate card, just drop one
    #####: 1273:		state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1274:		state->playedCardCount++;
    #####: 1275:		tributeRevealedCards[1] = -1;
        -: 1276:	}
        -: 1277:
     2000: 1278:	for (i = 0; i <= 2; i++) {
branch  0 taken 100%
branch  1 taken 0% (fallthrough)
     2000: 1279:		if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold) 
branch  0 taken 95% (fallthrough)
branch  1 taken 5%
branch  2 taken 95% (fallthrough)
branch  3 taken 5%
branch  4 taken 4% (fallthrough)
branch  5 taken 96%
        -: 1280:		{ //Treasure cards
      258: 1281:			*bonus += 2; // same here use bonus to prevent potencial error in updateCoins in playcard()
        -: 1282:		}
        -: 1283:
     1742: 1284:		else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall) 
branch  0 taken 96% (fallthrough)
branch  1 taken 4%
branch  2 taken 96% (fallthrough)
branch  3 taken 4%
branch  4 taken 95% (fallthrough)
branch  5 taken 5%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 3% (fallthrough)
branch  9 taken 97%
        -: 1285:		{ //Victory Card Found
      254: 1286:			drawCard(currentPlayer, state);
call    0 returned 100%
      254: 1287:			drawCard(currentPlayer, state);
call    0 returned 100%
        -: 1288:		}
     1488: 1289:		else if (tributeRevealedCards[i] != -1)
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        -: 1290:		{ //Action Card
      488: 1291:			state->numActions = state->numActions + 2;
        -: 1292:		}
        -: 1293:		else
        -: 1294:		// since we assigned -1, we need one more else to break out the loop when we meet -1.
        -: 1295:		{
     1000: 1296:			break;
        -: 1297:		}
        -: 1298:
        -: 1299:	}
     1000: 1300:	discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
     1000: 1301:	return 0;
        -: 1302:
        -: 1303:}
        -: 1304:
function play_mine called 0 returned 0% blocks executed 0%
    #####: 1305:int play_mine(int choice1, int choice2, int currentPlayer, struct gameState *state, int handPos) {
        -: 1306:
        -: 1307:	int i,j;
    #####: 1308:	j = state->hand[currentPlayer][choice1];  //store card we will trash
        -: 1309:
    #####: 1310:	if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1311:	{
    #####: 1312:		return -1;
        -: 1313:	}
        -: 1314:
    #####: 1315:	if (choice2 > gold || choice2 < copper)// treasure_map is another card in dominion and its cost is 4, which is not right. just simply replace treasure_map and curse with gold and copper solve this issue.
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1316:	{
    #####: 1317:		return -1;
        -: 1318:	}
        -: 1319:
    #####: 1320:	if ((getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 1321:	{
    #####: 1322:		return -1;
        -: 1323:	}
        -: 1324:
    #####: 1325:	gainCard(choice2, state, 0, currentPlayer); // bug 1 put the new treasure card into discard pile
call    0 never executed
        -: 1326:
        -: 1327:	//discard trashed card
    #####: 1328:	for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1329:	{
    #####: 1330:		if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -: 1331:		{
    #####: 1332:			discardCard(i, currentPlayer, state, 1);// it should not be discarded but trashed. so the trash-flag should be 1
call    0 never executed
        -: 1333:			// break; // bug 2 here, remove break makes it discard all the selected treasure card in hand.
        -: 1334:		}
        -: 1335:	}
        -: 1336:
        -: 1337:	//discard card from hand
    #####: 1338:	discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1339:
    #####: 1340:	return 0;
        -: 1341:
        -: 1342:}
        -: 1343:
function discardCard called 10675 returned 100% blocks executed 100%
    10675: 1344:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1345:{
        -: 1346:
        -: 1347:    //if card is not trashed, added to Played pile
    10675: 1348:    if (trashFlag < 1)
branch  0 taken 91% (fallthrough)
branch  1 taken 9%
        -: 1349:    {
        -: 1350:        //add card to played pile
     9675: 1351:        state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
     9675: 1352:        state->playedCardCount++;
     9675: 1353:		state->discardCount[currentPlayer] +=1;
     9675: 1354:		state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][handPos];
        -: 1355:    }
        -: 1356:
        -: 1357:    //set played card to -1
    10675: 1358:    state->hand[currentPlayer][handPos] = -1;
        -: 1359:
        -: 1360:    //remove card from player's hand
    10675: 1361:    if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 34% (fallthrough)
branch  1 taken 66%
        -: 1362:    {
        -: 1363:        //reduce number of cards in hand
     3657: 1364:        state->handCount[currentPlayer]--;
        -: 1365:    }
     7018: 1366:    else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 7% (fallthrough)
branch  1 taken 93%
        -: 1367:    {
        -: 1368:        //reduce number of cards in hand
      516: 1369:        state->handCount[currentPlayer]--;
        -: 1370:    }
        -: 1371:    else
        -: 1372:    {
        -: 1373:        //replace discarded card with last card in hand
     6502: 1374:        state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1375:        //set last card to -1
     6502: 1376:        state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1377:        //reduce number of cards in hand
     6502: 1378:        state->handCount[currentPlayer]--;
        -: 1379:    }
        -: 1380:
    10675: 1381:    return 0;
        -: 1382:}
        -: 1383:
function gainCard called 878 returned 100% blocks executed 70%
      878: 1384:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1385:{
        -: 1386:    //Note: supplyPos is enum of choosen card
        -: 1387:
        -: 1388:    //check if supply pile is empty (0) or card is not used in game (-1)
      878: 1389:    if ( supplyCount(supplyPos, state) < 1 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -: 1390:    {
    #####: 1391:        return -1;
        -: 1392:    }
        -: 1393:
        -: 1394:    //added card for [whoseTurn] current player:
        -: 1395:    // toFlag = 0 : add to discard
        -: 1396:    // toFlag = 1 : add to deck
        -: 1397:    // toFlag = 2 : add to hand
        -: 1398:
      878: 1399:    if (toFlag == 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1400:    {
    #####: 1401:        state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1402:        state->deckCount[player]++;
        -: 1403:    }
      878: 1404:    else if (toFlag == 2)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1405:    {
    #####: 1406:        state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1407:        state->handCount[player]++;
        -: 1408:    }
        -: 1409:    else
        -: 1410:    {
      878: 1411:        state->discard[player][ state->discardCount[player] ] = supplyPos;
      878: 1412:        state->discardCount[player]++;
        -: 1413:    }
        -: 1414:
        -: 1415:    //decrease number in supply pile
      878: 1416:    state->supplyCount[supplyPos]--;
        -: 1417:
      878: 1418:    return 0;
        -: 1419:}
        -: 1420:
function updateCoins called 6000 returned 100% blocks executed 100%
     6000: 1421:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1422:{
        -: 1423:    int i;
        -: 1424:
        -: 1425:    //reset coin count
     6000: 1426:    state->coins = 0;
        -: 1427:
        -: 1428:    //add coins for each Treasure card in player's hand
    32829: 1429:    for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 82%
branch  1 taken 18% (fallthrough)
        -: 1430:    {
    26829: 1431:        if (state->hand[player][i] == copper)
branch  0 taken 49% (fallthrough)
branch  1 taken 51%
        -: 1432:        {
    13229: 1433:            state->coins += 1;
        -: 1434:        }
    13600: 1435:        else if (state->hand[player][i] == silver)
branch  0 taken 8% (fallthrough)
branch  1 taken 92%
        -: 1436:        {
     1057: 1437:            state->coins += 2;
        -: 1438:        }
    12543: 1439:        else if (state->hand[player][i] == gold)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -: 1440:        {
      793: 1441:            state->coins += 3;
        -: 1442:        }
        -: 1443:    }
        -: 1444:
        -: 1445:    //add bonus
     6000: 1446:    state->coins += bonus;
        -: 1447:
     6000: 1448:    return 0;
        -: 1449:}
        -: 1450:
        -: 1451:
        -: 1452://end of dominion.c
        -: 1453:
